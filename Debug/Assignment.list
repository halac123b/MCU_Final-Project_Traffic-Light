
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004694  08004694  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004694  08004694  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004694  08004694  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800469c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000cc  08004768  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004768  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015135  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de5  00000000  00000000  0003522a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00038010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00038dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a17b  00000000  00000000  00039a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109c8  00000000  00000000  00053bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b38c  00000000  00000000  0006458b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000ef96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080045e0 	.word	0x080045e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	080045e0 	.word	0x080045e0

0800014c <readButton>:

int timeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void readButton(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0a2      	b.n	800029e <readButton+0x152>
		keyReg2[i] = keyReg1[i];
 8000158:	4a55      	ldr	r2, [pc, #340]	; (80002b0 <readButton+0x164>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4954      	ldr	r1, [pc, #336]	; (80002b4 <readButton+0x168>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg0[i];
 8000168:	4a53      	ldr	r2, [pc, #332]	; (80002b8 <readButton+0x16c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	494f      	ldr	r1, [pc, #316]	; (80002b0 <readButton+0x164>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b03      	cmp	r3, #3
 800017c:	d836      	bhi.n	80001ec <readButton+0xa0>
 800017e:	a201      	add	r2, pc, #4	; (adr r2, 8000184 <readButton+0x38>)
 8000180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000184:	08000195 	.word	0x08000195
 8000188:	080001ab 	.word	0x080001ab
 800018c:	080001c1 	.word	0x080001c1
 8000190:	080001d7 	.word	0x080001d7
		switch(i){	// Check button nào đang đc press
		case BTN_1:
			keyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 8000194:	2102      	movs	r1, #2
 8000196:	4849      	ldr	r0, [pc, #292]	; (80002bc <readButton+0x170>)
 8000198:	f001 ffbc 	bl	8002114 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	4619      	mov	r1, r3
 80001a0:	4a45      	ldr	r2, [pc, #276]	; (80002b8 <readButton+0x16c>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001a8:	e021      	b.n	80001ee <readButton+0xa2>
		case BTN_2:
			keyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 80001aa:	2110      	movs	r1, #16
 80001ac:	4843      	ldr	r0, [pc, #268]	; (80002bc <readButton+0x170>)
 80001ae:	f001 ffb1 	bl	8002114 <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4619      	mov	r1, r3
 80001b6:	4a40      	ldr	r2, [pc, #256]	; (80002b8 <readButton+0x16c>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001be:	e016      	b.n	80001ee <readButton+0xa2>
		case BTN_3:
			keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, BTN_3_Pin);
 80001c0:	2101      	movs	r1, #1
 80001c2:	483f      	ldr	r0, [pc, #252]	; (80002c0 <readButton+0x174>)
 80001c4:	f001 ffa6 	bl	8002114 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	4619      	mov	r1, r3
 80001cc:	4a3a      	ldr	r2, [pc, #232]	; (80002b8 <readButton+0x16c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001d4:	e00b      	b.n	80001ee <readButton+0xa2>
		case BTN_PD:
			keyReg0[i] = HAL_GPIO_ReadPin(GPIOA, PD_BTN_Pin);
 80001d6:	2101      	movs	r1, #1
 80001d8:	4838      	ldr	r0, [pc, #224]	; (80002bc <readButton+0x170>)
 80001da:	f001 ff9b 	bl	8002114 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a35      	ldr	r2, [pc, #212]	; (80002b8 <readButton+0x16c>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001ea:	e000      	b.n	80001ee <readButton+0xa2>
		default:
			break;
 80001ec:	bf00      	nop
		}
		if ((keyReg1[i] == keyReg0[i]) && (keyReg1[i] == keyReg2[i])){
 80001ee:	4a30      	ldr	r2, [pc, #192]	; (80002b0 <readButton+0x164>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f6:	4930      	ldr	r1, [pc, #192]	; (80002b8 <readButton+0x16c>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d14a      	bne.n	8000298 <readButton+0x14c>
 8000202:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <readButton+0x164>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	492a      	ldr	r1, [pc, #168]	; (80002b4 <readButton+0x168>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d140      	bne.n	8000298 <readButton+0x14c>
			if (keyReg2[i] != keyReg3[i]){
 8000216:	4a27      	ldr	r2, [pc, #156]	; (80002b4 <readButton+0x168>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	4929      	ldr	r1, [pc, #164]	; (80002c4 <readButton+0x178>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d022      	beq.n	8000270 <readButton+0x124>
				keyReg3[i] = keyReg2[i];
 800022a:	4a22      	ldr	r2, [pc, #136]	; (80002b4 <readButton+0x168>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4924      	ldr	r1, [pc, #144]	; (80002c4 <readButton+0x178>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (keyReg3[i] == IS_PRESSED){
 800023a:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <readButton+0x178>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d109      	bne.n	800025a <readButton+0x10e>
					timeOutForKeyPress[i] = LONG_DURATION;
 8000246:	4a20      	ldr	r2, [pc, #128]	; (80002c8 <readButton+0x17c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f83e 	bl	80002d4 <subKeyProcess>
 8000258:	e01e      	b.n	8000298 <readButton+0x14c>
				}
				else {
					flagBtnLong[i] = 0;
 800025a:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <readButton+0x180>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2100      	movs	r1, #0
 8000260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					over1Sec[i] = 0;
 8000264:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <readButton+0x184>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2100      	movs	r1, #0
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800026e:	e013      	b.n	8000298 <readButton+0x14c>
				}
			}
			else {
				timeOutForKeyPress[i]--;
 8000270:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <readButton+0x17c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	1e5a      	subs	r2, r3, #1
 800027a:	4913      	ldr	r1, [pc, #76]	; (80002c8 <readButton+0x17c>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeOutForKeyPress[i] == 0)
 8000282:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <readButton+0x17c>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d104      	bne.n	8000298 <readButton+0x14c>
					keyReg3[i] = IS_RELEASED;
 800028e:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <readButton+0x178>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2101      	movs	r1, #1
 8000294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3301      	adds	r3, #1
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	f77f af59 	ble.w	8000158 <readButton+0xc>
			}
		}
	}
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	20000020 	.word	0x20000020
 80002b8:	20000000 	.word	0x20000000
 80002bc:	40010800 	.word	0x40010800
 80002c0:	40010c00 	.word	0x40010c00
 80002c4:	20000030 	.word	0x20000030
 80002c8:	20000040 	.word	0x20000040
 80002cc:	20000108 	.word	0x20000108
 80002d0:	200000e8 	.word	0x200000e8

080002d4 <subKeyProcess>:

void subKeyProcess(int index){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <subKeyProcess+0x48>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2101      	movs	r1, #1
 80002e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (over1Sec[index] == 0)
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <subKeyProcess+0x4c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d105      	bne.n	80002fe <subKeyProcess+0x2a>
			over1Sec[index] = 1;
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <subKeyProcess+0x4c>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2101      	movs	r1, #1
 80002f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	else {
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 80002fc:	e009      	b.n	8000312 <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <subKeyProcess+0x50>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2101      	movs	r1, #1
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <subKeyProcess+0x48>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2100      	movs	r1, #0
 800030e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	200000f8 	.word	0x200000f8
 8000320:	200000e8 	.word	0x200000e8
 8000324:	20000108 	.word	0x20000108

08000328 <isBtnPress>:

int isBtnPress(int index){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 8000330:	4a09      	ldr	r2, [pc, #36]	; (8000358 <isBtnPress+0x30>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d106      	bne.n	800034a <isBtnPress+0x22>
		flagBtn[index] = 0;
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <isBtnPress+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2100      	movs	r1, #0
 8000342:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000346:	2301      	movs	r3, #1
 8000348:	e000      	b.n	800034c <isBtnPress+0x24>
	}
	return 0;
 800034a:	2300      	movs	r3, #0
}
 800034c:	4618      	mov	r0, r3
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	200000f8 	.word	0x200000f8

0800035c <isBtnLongPress>:

int isBtnLongPress(int index){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 8000364:	4a06      	ldr	r2, [pc, #24]	; (8000380 <isBtnLongPress+0x24>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036c:	2b01      	cmp	r3, #1
 800036e:	bf0c      	ite	eq
 8000370:	2301      	moveq	r3, #1
 8000372:	2300      	movne	r3, #0
 8000374:	b2db      	uxtb	r3, r3
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	20000108 	.word	0x20000108

08000384 <buzzerModifyVolume>:
#include "buzzer.h"
#include "global.h"

TIM_HandleTypeDef htim3;

void buzzerModifyVolume(uint8_t volume){
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, volume);
 800038e:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <buzzerModifyVolume+0x1c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	79fa      	ldrb	r2, [r7, #7]
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	20000178 	.word	0x20000178

080003a4 <buzzerTurnOn>:

void buzzerTurnOn(){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	buzzerModifyVolume(50);
 80003a8:	2032      	movs	r0, #50	; 0x32
 80003aa:	f7ff ffeb 	bl	8000384 <buzzerModifyVolume>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <buzzerTurnOff>:

void buzzerTurnOff(){
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
	buzzerModifyVolume(0);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f7ff ffe4 	bl	8000384 <buzzerModifyVolume>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <buzzerBlink>:

void buzzerBlink(){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	if (buzzerState == BZ_ON)
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <buzzerBlink+0x1c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b51      	cmp	r3, #81	; 0x51
 80003ca:	d102      	bne.n	80003d2 <buzzerBlink+0x12>
		buzzerTurnOn();
 80003cc:	f7ff ffea 	bl	80003a4 <buzzerTurnOn>
	else
		buzzerTurnOff();
}
 80003d0:	e001      	b.n	80003d6 <buzzerBlink+0x16>
		buzzerTurnOff();
 80003d2:	f7ff ffee 	bl	80003b2 <buzzerTurnOff>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000137 	.word	0x20000137

080003e0 <setDuration>:
void initDuration(){
	setTimerDuration(TIMER_DUR, 10);
	durationList[0] = durationList[1] = 0;
}

void setDuration(uint8_t index, uint32_t duration){
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	6039      	str	r1, [r7, #0]
 80003ea:	71fb      	strb	r3, [r7, #7]
	durationList[index] = duration / DUR_CYCLE;
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	683a      	ldr	r2, [r7, #0]
 80003f0:	4905      	ldr	r1, [pc, #20]	; (8000408 <setDuration+0x28>)
 80003f2:	fba1 1202 	umull	r1, r2, r1, r2
 80003f6:	08d2      	lsrs	r2, r2, #3
 80003f8:	4904      	ldr	r1, [pc, #16]	; (800040c <setDuration+0x2c>)
 80003fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	cccccccd 	.word	0xcccccccd
 800040c:	200001c0 	.word	0x200001c0

08000410 <getDuration>:

uint32_t getDuration(uint8_t index){
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	uint32_t extraDuration = ((durationList[index] * DUR_CYCLE) % (DUR_UNIT)) ? 1 : 0;
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	4a15      	ldr	r2, [pc, #84]	; (8000474 <getDuration+0x64>)
 800041e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	461a      	mov	r2, r3
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <getDuration+0x68>)
 800042e:	fba3 1302 	umull	r1, r3, r3, r2
 8000432:	099b      	lsrs	r3, r3, #6
 8000434:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000438:	fb01 f303 	mul.w	r3, r1, r3
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	bf14      	ite	ne
 8000442:	2301      	movne	r3, #1
 8000444:	2300      	moveq	r3, #0
 8000446:	b2db      	uxtb	r3, r3
 8000448:	60fb      	str	r3, [r7, #12]
	return (durationList[index] * DUR_CYCLE / DUR_UNIT) + extraDuration;
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	4a09      	ldr	r2, [pc, #36]	; (8000474 <getDuration+0x64>)
 800044e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000452:	4613      	mov	r3, r2
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	461a      	mov	r2, r3
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <getDuration+0x68>)
 800045e:	fba3 2302 	umull	r2, r3, r3, r2
 8000462:	099a      	lsrs	r2, r3, #6
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	4413      	add	r3, r2
}
 8000468:	4618      	mov	r0, r3
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	200001c0 	.word	0x200001c0
 8000478:	10624dd3 	.word	0x10624dd3

0800047c <runDuration>:

void runDuration(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	durationList[0] = (durationList[0] == 0) ? 0 : durationList[0] - 1;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <runDuration+0x38>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d003      	beq.n	8000490 <runDuration+0x14>
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <runDuration+0x38>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3b01      	subs	r3, #1
 800048e:	e000      	b.n	8000492 <runDuration+0x16>
 8000490:	2300      	movs	r3, #0
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <runDuration+0x38>)
 8000494:	6013      	str	r3, [r2, #0]
	durationList[1] = (durationList[1] == 0) ? 0 : durationList[1] - 1;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <runDuration+0x38>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d003      	beq.n	80004a6 <runDuration+0x2a>
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <runDuration+0x38>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	e000      	b.n	80004a8 <runDuration+0x2c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	4a02      	ldr	r2, [pc, #8]	; (80004b4 <runDuration+0x38>)
 80004aa:	6053      	str	r3, [r2, #4]
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	200001c0 	.word	0x200001c0

080004b8 <initPedestrian>:
uint8_t pdState = 0;
uint32_t pdDuration = 0,
		 pdPrevDur = 0,
		 pdCurrDur = 0;

void initPedestrian(){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	pdState = PD_INIT;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <initPedestrian+0x18>)
 80004be:	2232      	movs	r2, #50	; 0x32
 80004c0:	701a      	strb	r2, [r3, #0]
	pdActiveState = PD_A_INIT;
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <initPedestrian+0x1c>)
 80004c4:	223c      	movs	r2, #60	; 0x3c
 80004c6:	701a      	strb	r2, [r3, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	20000118 	.word	0x20000118
 80004d4:	20000135 	.word	0x20000135

080004d8 <sendPdDuration>:

void sendPdDuration(){	// Send duration through UART
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	// Get duration of pd in second
	pdCurrDur = getDuration(DUR_PEDESTRIAN);
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff ff97 	bl	8000410 <getDuration>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <sendPdDuration+0x34>)
 80004e6:	6013      	str	r3, [r2, #0]
	if (pdCurrDur != pdPrevDur)
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <sendPdDuration+0x34>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <sendPdDuration+0x38>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d005      	beq.n	8000500 <sendPdDuration+0x28>
		sendUartNumber("Pedestrian duration: ", pdCurrDur);
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <sendPdDuration+0x34>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <sendPdDuration+0x3c>)
 80004fc:	f001 facc 	bl	8001a98 <sendUartNumber>
	pdPrevDur = pdCurrDur;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <sendPdDuration+0x34>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a02      	ldr	r2, [pc, #8]	; (8000510 <sendPdDuration+0x38>)
 8000506:	6013      	str	r3, [r2, #0]
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000124 	.word	0x20000124
 8000510:	20000120 	.word	0x20000120
 8000514:	080045f8 	.word	0x080045f8

08000518 <initAcitvePd>:

void initAcitvePd(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	pdDuration = 2 * getTotalDuration();	// Bằng 2 lần tổng chu kì các đèn traffic
 800051c:	f000 fcb2 	bl	8000e84 <getTotalDuration>
 8000520:	4603      	mov	r3, r0
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <initAcitvePd+0x4c>)
 8000526:	6013      	str	r3, [r2, #0]
	// Blink đèn đi bộ sau 1 khoảng thời gian trước khi tắt
	if (checkTimerFlag(TIMER_BLINK)){
 8000528:	2005      	movs	r0, #5
 800052a:	f001 fa4f 	bl	80019cc <checkTimerFlag>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d014      	beq.n	800055e <initAcitvePd+0x46>
		setTimerDuration(TIMER_BLINK, PD_BLINK_DUR);
 8000534:	21c8      	movs	r1, #200	; 0xc8
 8000536:	2005      	movs	r0, #5
 8000538:	f001 fa2e 	bl	8001998 <setTimerDuration>
		if (pdLedState == PD_LED_OFF){
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <initAcitvePd+0x50>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b48      	cmp	r3, #72	; 0x48
 8000542:	d106      	bne.n	8000552 <initAcitvePd+0x3a>
			pdLedState = PD_LED_ON;
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <initAcitvePd+0x50>)
 8000546:	2247      	movs	r2, #71	; 0x47
 8000548:	701a      	strb	r2, [r3, #0]
			buzzerState = BZ_ON;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <initAcitvePd+0x54>)
 800054c:	2251      	movs	r2, #81	; 0x51
 800054e:	701a      	strb	r2, [r3, #0]
		else {
			pdLedState = PD_LED_OFF;
			buzzerState = BZ_OFF;
		}
	}
}
 8000550:	e005      	b.n	800055e <initAcitvePd+0x46>
			pdLedState = PD_LED_OFF;
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <initAcitvePd+0x50>)
 8000554:	2248      	movs	r2, #72	; 0x48
 8000556:	701a      	strb	r2, [r3, #0]
			buzzerState = BZ_OFF;
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <initAcitvePd+0x54>)
 800055a:	2252      	movs	r2, #82	; 0x52
 800055c:	701a      	strb	r2, [r3, #0]
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000011c 	.word	0x2000011c
 8000568:	20000136 	.word	0x20000136
 800056c:	20000137 	.word	0x20000137

08000570 <fsmPdActive>:

void fsmPdActive(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	initAcitvePd();
 8000574:	f7ff ffd0 	bl	8000518 <initAcitvePd>
	switch(pdActiveState){
 8000578:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <fsmPdActive+0xc8>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b3e      	cmp	r3, #62	; 0x3e
 800057e:	d02a      	beq.n	80005d6 <fsmPdActive+0x66>
 8000580:	2b3e      	cmp	r3, #62	; 0x3e
 8000582:	dc51      	bgt.n	8000628 <fsmPdActive+0xb8>
 8000584:	2b3c      	cmp	r3, #60	; 0x3c
 8000586:	d002      	beq.n	800058e <fsmPdActive+0x1e>
 8000588:	2b3d      	cmp	r3, #61	; 0x3d
 800058a:	d004      	beq.n	8000596 <fsmPdActive+0x26>
		}
		break;

	///////////////////////////////////////////
	default:
		break;
 800058c:	e04c      	b.n	8000628 <fsmPdActive+0xb8>
		pdActiveState = PD_A_RED;
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <fsmPdActive+0xc8>)
 8000590:	223d      	movs	r2, #61	; 0x3d
 8000592:	701a      	strb	r2, [r3, #0]
		break;
 8000594:	e04d      	b.n	8000632 <fsmPdActive+0xc2>
		sendPdDuration();
 8000596:	f7ff ff9f 	bl	80004d8 <sendPdDuration>
		turnOnLed(PEDESTRIAN, LED_RED);
 800059a:	2100      	movs	r1, #0
 800059c:	2007      	movs	r0, #7
 800059e:	f000 fc95 	bl	8000ecc <turnOnLed>
		buzzerTurnOff();
 80005a2:	f7ff ff06 	bl	80003b2 <buzzerTurnOff>
		if (isBtnPress(BTN_PD)){
 80005a6:	2003      	movs	r0, #3
 80005a8:	f7ff febe 	bl	8000328 <isBtnPress>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d03c      	beq.n	800062c <fsmPdActive+0xbc>
			clearTimer(TIMER_PD);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f001 fa22 	bl	80019fc <clearTimer>
			setTimerDuration(TIMER_PD, pdDuration);
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <fsmPdActive+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	2003      	movs	r0, #3
 80005c0:	f001 f9ea 	bl	8001998 <setTimerDuration>
			setDuration(DUR_PEDESTRIAN, pdDuration);
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <fsmPdActive+0xcc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff ff08 	bl	80003e0 <setDuration>
			buzzerTurnOff();
 80005d0:	f7ff feef 	bl	80003b2 <buzzerTurnOff>
		break;
 80005d4:	e02a      	b.n	800062c <fsmPdActive+0xbc>
		sendPdDuration();
 80005d6:	f7ff ff7f 	bl	80004d8 <sendPdDuration>
		if (getTrafficCurrDur() > 3){
 80005da:	f000 f8b3 	bl	8000744 <getTrafficCurrDur>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d906      	bls.n	80005f2 <fsmPdActive+0x82>
			turnOnLed(PEDESTRIAN, LED_GREEN);
 80005e4:	2101      	movs	r1, #1
 80005e6:	2007      	movs	r0, #7
 80005e8:	f000 fc70 	bl	8000ecc <turnOnLed>
			buzzerTurnOff();
 80005ec:	f7ff fee1 	bl	80003b2 <buzzerTurnOff>
 80005f0:	e004      	b.n	80005fc <fsmPdActive+0x8c>
			blinkPdLed(LED_GREEN);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fd56 	bl	80010a4 <blinkPdLed>
			buzzerBlink();
 80005f8:	f7ff fee2 	bl	80003c0 <buzzerBlink>
		if (isBtnPress(BTN_PD)){
 80005fc:	2003      	movs	r0, #3
 80005fe:	f7ff fe93 	bl	8000328 <isBtnPress>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d013      	beq.n	8000630 <fsmPdActive+0xc0>
			clearTimer(TIMER_PD);
 8000608:	2003      	movs	r0, #3
 800060a:	f001 f9f7 	bl	80019fc <clearTimer>
			setTimerDuration(TIMER_PD, pdDuration);
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <fsmPdActive+0xcc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	2003      	movs	r0, #3
 8000616:	f001 f9bf 	bl	8001998 <setTimerDuration>
			setDuration(DUR_PEDESTRIAN, pdDuration);
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <fsmPdActive+0xcc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	2001      	movs	r0, #1
 8000622:	f7ff fedd 	bl	80003e0 <setDuration>
		break;
 8000626:	e003      	b.n	8000630 <fsmPdActive+0xc0>
		break;
 8000628:	bf00      	nop
 800062a:	e002      	b.n	8000632 <fsmPdActive+0xc2>
		break;
 800062c:	bf00      	nop
 800062e:	e000      	b.n	8000632 <fsmPdActive+0xc2>
		break;
 8000630:	bf00      	nop
	}
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000135 	.word	0x20000135
 800063c:	2000011c 	.word	0x2000011c

08000640 <fsmPedestrian>:

void fsmPedestrian(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	switch(pdState){
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <fsmPedestrian+0xbc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b34      	cmp	r3, #52	; 0x34
 800064a:	d038      	beq.n	80006be <fsmPedestrian+0x7e>
 800064c:	2b34      	cmp	r3, #52	; 0x34
 800064e:	dc4d      	bgt.n	80006ec <fsmPedestrian+0xac>
 8000650:	2b32      	cmp	r3, #50	; 0x32
 8000652:	d002      	beq.n	800065a <fsmPedestrian+0x1a>
 8000654:	2b33      	cmp	r3, #51	; 0x33
 8000656:	d007      	beq.n	8000668 <fsmPedestrian+0x28>
		}
		break;

	//////////////////////////////////////////////////////
	default:
		break;
 8000658:	e048      	b.n	80006ec <fsmPedestrian+0xac>
		turnOffLed(PEDESTRIAN);
 800065a:	2007      	movs	r0, #7
 800065c:	f000 fce6 	bl	800102c <turnOffLed>
		pdState = PD_IDLE;
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <fsmPedestrian+0xbc>)
 8000662:	2233      	movs	r2, #51	; 0x33
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e046      	b.n	80006f6 <fsmPedestrian+0xb6>
		turnOffLed(PEDESTRIAN);
 8000668:	2007      	movs	r0, #7
 800066a:	f000 fcdf 	bl	800102c <turnOffLed>
		buzzerTurnOff();
 800066e:	f7ff fea0 	bl	80003b2 <buzzerTurnOff>
		if (isBtnPress(BTN_PD)){
 8000672:	2003      	movs	r0, #3
 8000674:	f7ff fe58 	bl	8000328 <isBtnPress>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d038      	beq.n	80006f0 <fsmPedestrian+0xb0>
			pdState = PD_ACTIVE;
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <fsmPedestrian+0xbc>)
 8000680:	2234      	movs	r2, #52	; 0x34
 8000682:	701a      	strb	r2, [r3, #0]
			pdDuration = 2 * getTotalDuration();
 8000684:	f000 fbfe 	bl	8000e84 <getTotalDuration>
 8000688:	4603      	mov	r3, r0
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <fsmPedestrian+0xc0>)
 800068e:	6013      	str	r3, [r2, #0]
			clearTimer(TIMER_PD);
 8000690:	2003      	movs	r0, #3
 8000692:	f001 f9b3 	bl	80019fc <clearTimer>
			setTimerDuration(TIMER_PD, pdDuration);
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <fsmPedestrian+0xc0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	2003      	movs	r0, #3
 800069e:	f001 f97b 	bl	8001998 <setTimerDuration>
			setDuration(DUR_PEDESTRIAN, pdDuration);
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <fsmPedestrian+0xc0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fe99 	bl	80003e0 <setDuration>
			clearTimer(TIMER_BLINK);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f001 f9a4 	bl	80019fc <clearTimer>
			setTimerDuration(TIMER_BLINK, PD_BLINK_DUR);
 80006b4:	21c8      	movs	r1, #200	; 0xc8
 80006b6:	2005      	movs	r0, #5
 80006b8:	f001 f96e 	bl	8001998 <setTimerDuration>
		break;
 80006bc:	e018      	b.n	80006f0 <fsmPedestrian+0xb0>
		fsmPdActive();
 80006be:	f7ff ff57 	bl	8000570 <fsmPdActive>
		if (checkTimerFlag(TIMER_PD))
 80006c2:	2003      	movs	r0, #3
 80006c4:	f001 f982 	bl	80019cc <checkTimerFlag>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <fsmPedestrian+0x94>
			pdState = PD_IDLE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <fsmPedestrian+0xbc>)
 80006d0:	2233      	movs	r2, #51	; 0x33
 80006d2:	701a      	strb	r2, [r3, #0]
		if (isSetMode()){	// Nếu đang trong set mode, đèn đi bộ tắt
 80006d4:	f000 fbc6 	bl	8000e64 <isSetMode>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00a      	beq.n	80006f4 <fsmPedestrian+0xb4>
			clearTimer(TIMER_PD);
 80006de:	2003      	movs	r0, #3
 80006e0:	f001 f98c 	bl	80019fc <clearTimer>
			pdState = PD_IDLE;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <fsmPedestrian+0xbc>)
 80006e6:	2233      	movs	r2, #51	; 0x33
 80006e8:	701a      	strb	r2, [r3, #0]
		break;
 80006ea:	e003      	b.n	80006f4 <fsmPedestrian+0xb4>
		break;
 80006ec:	bf00      	nop
 80006ee:	e002      	b.n	80006f6 <fsmPedestrian+0xb6>
		break;
 80006f0:	bf00      	nop
 80006f2:	e000      	b.n	80006f6 <fsmPedestrian+0xb6>
		break;
 80006f4:	bf00      	nop
	}
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000118 	.word	0x20000118
 8000700:	2000011c 	.word	0x2000011c

08000704 <initTraffic>:
/*-------------------- init setting --------------------*/
// Previous and current duration of traffic light
uint32_t trafficPrevDur = 0,
	     trafficCurDur  = 0;

void initTraffic(){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	globalState = INIT_MODE;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <initTraffic+0x2c>)
 800070a:	220a      	movs	r2, #10
 800070c:	701a      	strb	r2, [r3, #0]
	autoAState = AUTO_INIT;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <initTraffic+0x30>)
 8000710:	2214      	movs	r2, #20
 8000712:	701a      	strb	r2, [r3, #0]
	autoBState = AUTO_INIT;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <initTraffic+0x34>)
 8000716:	2214      	movs	r2, #20
 8000718:	701a      	strb	r2, [r3, #0]
	manualState = MN_INIT;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <initTraffic+0x38>)
 800071c:	221e      	movs	r2, #30
 800071e:	701a      	strb	r2, [r3, #0]
	setState = SET_INIT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <initTraffic+0x3c>)
 8000722:	2228      	movs	r2, #40	; 0x28
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000130 	.word	0x20000130
 8000734:	20000131 	.word	0x20000131
 8000738:	20000132 	.word	0x20000132
 800073c:	20000133 	.word	0x20000133
 8000740:	20000134 	.word	0x20000134

08000744 <getTrafficCurrDur>:

uint32_t getTrafficCurrDur(){
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	return trafficCurDur;
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <getTrafficCurrDur+0x10>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	2000012c 	.word	0x2000012c

08000758 <sendTrafficDuration>:

/*------------------- auto modefsm -------------------------*/
void sendTrafficDuration(){	// Send duration through UART
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	trafficCurDur = getDuration(DUR_TRAFFIC);	// Get duration in second(s)
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff fe57 	bl	8000410 <getDuration>
 8000762:	4603      	mov	r3, r0
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <sendTrafficDuration+0x3c>)
 8000766:	6013      	str	r3, [r2, #0]
	if (trafficCurDur && trafficCurDur != trafficPrevDur){	// Nếu duration thay đổi
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <sendTrafficDuration+0x3c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00b      	beq.n	8000788 <sendTrafficDuration+0x30>
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <sendTrafficDuration+0x3c>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <sendTrafficDuration+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d005      	beq.n	8000788 <sendTrafficDuration+0x30>
		sendUartNumber("Traffic duration: ", trafficCurDur);
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <sendTrafficDuration+0x3c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <sendTrafficDuration+0x44>)
 8000784:	f001 f988 	bl	8001a98 <sendUartNumber>
	}
	trafficPrevDur = trafficCurDur;
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <sendTrafficDuration+0x3c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a02      	ldr	r2, [pc, #8]	; (8000798 <sendTrafficDuration+0x40>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000012c 	.word	0x2000012c
 8000798:	20000128 	.word	0x20000128
 800079c:	08004610 	.word	0x08004610

080007a0 <fsmAutoA>:

void fsmAutoA(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	switch(autoAState){
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <fsmAutoA+0x10c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	3b14      	subs	r3, #20
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d874      	bhi.n	8000898 <fsmAutoA+0xf8>
 80007ae:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <fsmAutoA+0x14>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007c5 	.word	0x080007c5
 80007b8:	080007e5 	.word	0x080007e5
 80007bc:	08000823 	.word	0x08000823
 80007c0:	0800085b 	.word	0x0800085b
	case AUTO_INIT:
		autoAState = AUTO_RED;	// Đèn A chuyển sang Red trước
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <fsmAutoA+0x10c>)
 80007c6:	2215      	movs	r2, #21
 80007c8:	701a      	strb	r2, [r3, #0]
		// Add new timer
		setTimerDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <fsmAutoA+0x110>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	2000      	movs	r0, #0
 80007d2:	f001 f8e1 	bl	8001998 <setTimerDuration>
		setDuration(DUR_TRAFFIC, trafficDuration[LED_RED]);
 80007d6:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <fsmAutoA+0x110>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fdff 	bl	80003e0 <setDuration>
		break;
 80007e2:	e060      	b.n	80008a6 <fsmAutoA+0x106>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		turnOnLed(TRAFFIC_1, LED_RED);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2005      	movs	r0, #5
 80007e8:	f000 fb70 	bl	8000ecc <turnOnLed>
		sendTrafficDuration();
 80007ec:	f7ff ffb4 	bl	8000758 <sendTrafficDuration>

		// Change mode
		if (checkTimerFlag(TIMER_AUTO_A)){	// Red -> Green
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 f8eb 	bl	80019cc <checkTimerFlag>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d04f      	beq.n	800089c <fsmAutoA+0xfc>
			autoAState = AUTO_GREEN;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <fsmAutoA+0x10c>)
 80007fe:	2216      	movs	r2, #22
 8000800:	701a      	strb	r2, [r3, #0]
			pdActiveState = PD_A_RED;  // Đèn đi bộ chuyển sang đỏ
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <fsmAutoA+0x114>)
 8000804:	223d      	movs	r2, #61	; 0x3d
 8000806:	701a      	strb	r2, [r3, #0]
			setTimerDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <fsmAutoA+0x110>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4619      	mov	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f001 f8c2 	bl	8001998 <setTimerDuration>
			setDuration(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <fsmAutoA+0x110>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4619      	mov	r1, r3
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff fde0 	bl	80003e0 <setDuration>
		}
		break;
 8000820:	e03c      	b.n	800089c <fsmAutoA+0xfc>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		turnOnLed(TRAFFIC_1, LED_GREEN);
 8000822:	2101      	movs	r1, #1
 8000824:	2005      	movs	r0, #5
 8000826:	f000 fb51 	bl	8000ecc <turnOnLed>
		sendTrafficDuration();
 800082a:	f7ff ff95 	bl	8000758 <sendTrafficDuration>

		if (checkTimerFlag(TIMER_AUTO_A)){	// Green -> Yellow
 800082e:	2000      	movs	r0, #0
 8000830:	f001 f8cc 	bl	80019cc <checkTimerFlag>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d032      	beq.n	80008a0 <fsmAutoA+0x100>
			autoAState = AUTO_YELLOW;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <fsmAutoA+0x10c>)
 800083c:	2217      	movs	r2, #23
 800083e:	701a      	strb	r2, [r3, #0]
			setTimerDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <fsmAutoA+0x110>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	4619      	mov	r1, r3
 8000846:	2000      	movs	r0, #0
 8000848:	f001 f8a6 	bl	8001998 <setTimerDuration>
			setDuration(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <fsmAutoA+0x110>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	4619      	mov	r1, r3
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff fdc4 	bl	80003e0 <setDuration>
		}
		break;
 8000858:	e022      	b.n	80008a0 <fsmAutoA+0x100>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		turnOnLed(TRAFFIC_1, LED_YELLOW);
 800085a:	2102      	movs	r1, #2
 800085c:	2005      	movs	r0, #5
 800085e:	f000 fb35 	bl	8000ecc <turnOnLed>
		sendTrafficDuration();
 8000862:	f7ff ff79 	bl	8000758 <sendTrafficDuration>

		if (checkTimerFlag(TIMER_AUTO_A)){	// Yellow -> Red
 8000866:	2000      	movs	r0, #0
 8000868:	f001 f8b0 	bl	80019cc <checkTimerFlag>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d018      	beq.n	80008a4 <fsmAutoA+0x104>
			autoAState = AUTO_RED;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <fsmAutoA+0x10c>)
 8000874:	2215      	movs	r2, #21
 8000876:	701a      	strb	r2, [r3, #0]
			pdActiveState = PD_A_GREEN;	// Đèn đi bộ chuyển sang Green
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <fsmAutoA+0x114>)
 800087a:	223e      	movs	r2, #62	; 0x3e
 800087c:	701a      	strb	r2, [r3, #0]
			setTimerDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <fsmAutoA+0x110>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	2000      	movs	r0, #0
 8000886:	f001 f887 	bl	8001998 <setTimerDuration>
			setDuration(DUR_TRAFFIC, trafficDuration[LED_RED]);
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <fsmAutoA+0x110>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff fda5 	bl	80003e0 <setDuration>
		}
		break;
 8000896:	e005      	b.n	80008a4 <fsmAutoA+0x104>

	/////////////////////////////////////////////////////
	default:
		break;
 8000898:	bf00      	nop
 800089a:	e004      	b.n	80008a6 <fsmAutoA+0x106>
		break;
 800089c:	bf00      	nop
 800089e:	e002      	b.n	80008a6 <fsmAutoA+0x106>
		break;
 80008a0:	bf00      	nop
 80008a2:	e000      	b.n	80008a6 <fsmAutoA+0x106>
		break;
 80008a4:	bf00      	nop
	}
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000131 	.word	0x20000131
 80008b0:	20000050 	.word	0x20000050
 80008b4:	20000135 	.word	0x20000135

080008b8 <fsmAutoB>:

void fsmAutoB(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	switch(autoBState){
 80008bc:	4b2f      	ldr	r3, [pc, #188]	; (800097c <fsmAutoB+0xc4>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	3b14      	subs	r3, #20
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d850      	bhi.n	8000968 <fsmAutoB+0xb0>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <fsmAutoB+0x14>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	080008dd 	.word	0x080008dd
 80008d0:	080008f1 	.word	0x080008f1
 80008d4:	08000919 	.word	0x08000919
 80008d8:	08000941 	.word	0x08000941
	case AUTO_INIT:
		autoBState = AUTO_GREEN;  // Traffic 2 bật Green trước
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <fsmAutoB+0xc4>)
 80008de:	2216      	movs	r2, #22
 80008e0:	701a      	strb	r2, [r3, #0]
		setTimerDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <fsmAutoB+0xc8>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4619      	mov	r1, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	f001 f855 	bl	8001998 <setTimerDuration>
		break;
 80008ee:	e042      	b.n	8000976 <fsmAutoB+0xbe>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		turnOnLed(TRAFFIC_2, LED_RED);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2006      	movs	r0, #6
 80008f4:	f000 faea 	bl	8000ecc <turnOnLed>

		if (checkTimerFlag(TIMER_AUTO_B)){
 80008f8:	2001      	movs	r0, #1
 80008fa:	f001 f867 	bl	80019cc <checkTimerFlag>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d033      	beq.n	800096c <fsmAutoB+0xb4>
			autoBState = AUTO_GREEN;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <fsmAutoB+0xc4>)
 8000906:	2216      	movs	r2, #22
 8000908:	701a      	strb	r2, [r3, #0]
			setTimerDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <fsmAutoB+0xc8>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4619      	mov	r1, r3
 8000910:	2001      	movs	r0, #1
 8000912:	f001 f841 	bl	8001998 <setTimerDuration>
		}
		break;
 8000916:	e029      	b.n	800096c <fsmAutoB+0xb4>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		turnOnLed(TRAFFIC_2, LED_GREEN);
 8000918:	2101      	movs	r1, #1
 800091a:	2006      	movs	r0, #6
 800091c:	f000 fad6 	bl	8000ecc <turnOnLed>

		if (checkTimerFlag(TIMER_AUTO_B)){
 8000920:	2001      	movs	r0, #1
 8000922:	f001 f853 	bl	80019cc <checkTimerFlag>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d021      	beq.n	8000970 <fsmAutoB+0xb8>
			autoBState = AUTO_YELLOW;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <fsmAutoB+0xc4>)
 800092e:	2217      	movs	r2, #23
 8000930:	701a      	strb	r2, [r3, #0]
			setTimerDuration(TIMER_AUTO_B, trafficDuration[AUTO_YELLOW]);
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <fsmAutoB+0xc8>)
 8000934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000936:	4619      	mov	r1, r3
 8000938:	2001      	movs	r0, #1
 800093a:	f001 f82d 	bl	8001998 <setTimerDuration>
		}
		break;
 800093e:	e017      	b.n	8000970 <fsmAutoB+0xb8>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		turnOnLed(TRAFFIC_2, LED_YELLOW);
 8000940:	2102      	movs	r1, #2
 8000942:	2006      	movs	r0, #6
 8000944:	f000 fac2 	bl	8000ecc <turnOnLed>

		if (checkTimerFlag(TIMER_AUTO_B)){
 8000948:	2001      	movs	r0, #1
 800094a:	f001 f83f 	bl	80019cc <checkTimerFlag>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00f      	beq.n	8000974 <fsmAutoB+0xbc>
			autoBState = AUTO_RED;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <fsmAutoB+0xc4>)
 8000956:	2215      	movs	r2, #21
 8000958:	701a      	strb	r2, [r3, #0]
			setTimerDuration(TIMER_AUTO_B, trafficDuration[AUTO_RED]);
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <fsmAutoB+0xc8>)
 800095c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800095e:	4619      	mov	r1, r3
 8000960:	2001      	movs	r0, #1
 8000962:	f001 f819 	bl	8001998 <setTimerDuration>
		}
		break;
 8000966:	e005      	b.n	8000974 <fsmAutoB+0xbc>

	/////////////////////////////////////////////////////
	default:
		break;
 8000968:	bf00      	nop
 800096a:	e004      	b.n	8000976 <fsmAutoB+0xbe>
		break;
 800096c:	bf00      	nop
 800096e:	e002      	b.n	8000976 <fsmAutoB+0xbe>
		break;
 8000970:	bf00      	nop
 8000972:	e000      	b.n	8000976 <fsmAutoB+0xbe>
		break;
 8000974:	bf00      	nop
	}
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000132 	.word	0x20000132
 8000980:	20000050 	.word	0x20000050

08000984 <fsmManual>:

/*----------------- manual mode fsm -------------------------*/
void fsmManual(){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	switch(manualState){
 8000988:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <fsmManual+0xe4>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3b1e      	subs	r3, #30
 800098e:	2b04      	cmp	r3, #4
 8000990:	d85e      	bhi.n	8000a50 <fsmManual+0xcc>
 8000992:	a201      	add	r2, pc, #4	; (adr r2, 8000998 <fsmManual+0x14>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	080009ad 	.word	0x080009ad
 800099c:	080009b5 	.word	0x080009b5
 80009a0:	080009d9 	.word	0x080009d9
 80009a4:	08000a03 	.word	0x08000a03
 80009a8:	08000a27 	.word	0x08000a27
	case MN_INIT:
		manualState = MN_RED0;
 80009ac:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <fsmManual+0xe4>)
 80009ae:	221f      	movs	r2, #31
 80009b0:	701a      	strb	r2, [r3, #0]
		break;
 80009b2:	e056      	b.n	8000a62 <fsmManual+0xde>

	// MN_RED0: traffic A - red; traffic B - green
	case MN_RED0:
		turnOnLed(TRAFFIC_1, LED_RED);
 80009b4:	2100      	movs	r1, #0
 80009b6:	2005      	movs	r0, #5
 80009b8:	f000 fa88 	bl	8000ecc <turnOnLed>
		turnOnLed(TRAFFIC_2, LED_GREEN);
 80009bc:	2101      	movs	r1, #1
 80009be:	2006      	movs	r0, #6
 80009c0:	f000 fa84 	bl	8000ecc <turnOnLed>

		if (isBtnPress(BTN_2))
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fcaf 	bl	8000328 <isBtnPress>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d041      	beq.n	8000a54 <fsmManual+0xd0>
			manualState = MN_RED1;
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <fsmManual+0xe4>)
 80009d2:	2220      	movs	r2, #32
 80009d4:	701a      	strb	r2, [r3, #0]
		break;
 80009d6:	e03d      	b.n	8000a54 <fsmManual+0xd0>

	// MN_RED0: traffic A - red; traffic B - green
	case MN_RED1:
		turnOnLed(TRAFFIC_1, LED_RED);
 80009d8:	2100      	movs	r1, #0
 80009da:	2005      	movs	r0, #5
 80009dc:	f000 fa76 	bl	8000ecc <turnOnLed>
		turnOnLed(TRAFFIC_2, LED_YELLOW);
 80009e0:	2102      	movs	r1, #2
 80009e2:	2006      	movs	r0, #6
 80009e4:	f000 fa72 	bl	8000ecc <turnOnLed>

		if (isBtnPress(BTN_2)){
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff fc9d 	bl	8000328 <isBtnPress>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d031      	beq.n	8000a58 <fsmManual+0xd4>
			manualState = MN_GREEN;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <fsmManual+0xe4>)
 80009f6:	2221      	movs	r2, #33	; 0x21
 80009f8:	701a      	strb	r2, [r3, #0]
			pdActiveState = PD_A_RED;	// Đèn đi bộ sang Red
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <fsmManual+0xe8>)
 80009fc:	223d      	movs	r2, #61	; 0x3d
 80009fe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a00:	e02a      	b.n	8000a58 <fsmManual+0xd4>

	// MN_GREEN: traffic A - green; traffic B - red
	case MN_GREEN:
		turnOnLed(TRAFFIC_1, LED_GREEN);
 8000a02:	2101      	movs	r1, #1
 8000a04:	2005      	movs	r0, #5
 8000a06:	f000 fa61 	bl	8000ecc <turnOnLed>
		turnOnLed(TRAFFIC_2, LED_RED);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2006      	movs	r0, #6
 8000a0e:	f000 fa5d 	bl	8000ecc <turnOnLed>

		if (isBtnPress(BTN_2))
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff fc88 	bl	8000328 <isBtnPress>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d01e      	beq.n	8000a5c <fsmManual+0xd8>
			manualState = MN_YELLOW;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <fsmManual+0xe4>)
 8000a20:	2222      	movs	r2, #34	; 0x22
 8000a22:	701a      	strb	r2, [r3, #0]
		break;
 8000a24:	e01a      	b.n	8000a5c <fsmManual+0xd8>

	// MN_YELLOW: traffic A - yellow; traffic B - red
	case MN_YELLOW:
		turnOnLed(TRAFFIC_1, LED_YELLOW);
 8000a26:	2102      	movs	r1, #2
 8000a28:	2005      	movs	r0, #5
 8000a2a:	f000 fa4f 	bl	8000ecc <turnOnLed>
		turnOnLed(TRAFFIC_2, LED_RED);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2006      	movs	r0, #6
 8000a32:	f000 fa4b 	bl	8000ecc <turnOnLed>

		if (isBtnPress(BTN_2)){
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fc76 	bl	8000328 <isBtnPress>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00e      	beq.n	8000a60 <fsmManual+0xdc>
			manualState = MN_RED0;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <fsmManual+0xe4>)
 8000a44:	221f      	movs	r2, #31
 8000a46:	701a      	strb	r2, [r3, #0]
			pdActiveState = PD_A_GREEN;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <fsmManual+0xe8>)
 8000a4a:	223e      	movs	r2, #62	; 0x3e
 8000a4c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a4e:	e007      	b.n	8000a60 <fsmManual+0xdc>

	///////////////////////////////////////////////////////////
	default:
		break;
 8000a50:	bf00      	nop
 8000a52:	e006      	b.n	8000a62 <fsmManual+0xde>
		break;
 8000a54:	bf00      	nop
 8000a56:	e004      	b.n	8000a62 <fsmManual+0xde>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e002      	b.n	8000a62 <fsmManual+0xde>
		break;
 8000a5c:	bf00      	nop
 8000a5e:	e000      	b.n	8000a62 <fsmManual+0xde>
		break;
 8000a60:	bf00      	nop
	}
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000133 	.word	0x20000133
 8000a6c:	20000135 	.word	0x20000135

08000a70 <increaseDuration>:

/*-------------------- set mode fsm -------------------------*/
void increaseDuration(uint8_t ledType){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	trafficDuration[ledType] += DURATION_UNIT;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <increaseDuration+0x50>)
 8000a7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000a88:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <increaseDuration+0x50>)
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[ledType] > DURATION_MAX)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <increaseDuration+0x50>)
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d90a      	bls.n	8000ab4 <increaseDuration+0x44>
		trafficDuration[ledType] -= DURATION_MAX;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <increaseDuration+0x50>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000aac:	3b10      	subs	r3, #16
 8000aae:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <increaseDuration+0x50>)
 8000ab0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000050 	.word	0x20000050

08000ac4 <fsmSet>:

void fsmSet(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	switch(setState){
 8000ac8:	4b60      	ldr	r3, [pc, #384]	; (8000c4c <fsmSet+0x188>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3b28      	subs	r3, #40	; 0x28
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	f200 80b2 	bhi.w	8000c38 <fsmSet+0x174>
 8000ad4:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <fsmSet+0x18>)
 8000ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ada:	bf00      	nop
 8000adc:	08000aed 	.word	0x08000aed
 8000ae0:	08000af5 	.word	0x08000af5
 8000ae4:	08000b61 	.word	0x08000b61
 8000ae8:	08000bcd 	.word	0x08000bcd
	case SET_INIT:
		setState = SET_RED;
 8000aec:	4b57      	ldr	r3, [pc, #348]	; (8000c4c <fsmSet+0x188>)
 8000aee:	2229      	movs	r2, #41	; 0x29
 8000af0:	701a      	strb	r2, [r3, #0]
		break;
 8000af2:	e0a8      	b.n	8000c46 <fsmSet+0x182>

	// SET_RED: Manual set Red duration
	case SET_RED:
		turnOnLed(TRAFFIC_1, LED_RED);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2005      	movs	r0, #5
 8000af8:	f000 f9e8 	bl	8000ecc <turnOnLed>
		turnOnLed(TRAFFIC_2, LED_RED);
 8000afc:	2100      	movs	r1, #0
 8000afe:	2006      	movs	r0, #6
 8000b00:	f000 f9e4 	bl	8000ecc <turnOnLed>
		// Increase duration 1s once, max 100s
		if (isBtnPress(BTN_3)){
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff fc0f 	bl	8000328 <isBtnPress>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d009      	beq.n	8000b24 <fsmSet+0x60>
			increaseDuration(LED_RED);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff ffad 	bl	8000a70 <increaseDuration>
			clearTimer(TIMER_SET_LONG);
 8000b16:	2002      	movs	r0, #2
 8000b18:	f000 ff70 	bl	80019fc <clearTimer>
			setTimerDuration(TIMER_SET_LONG, 10);	// Set timer for long press
 8000b1c:	210a      	movs	r1, #10
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f000 ff3a 	bl	8001998 <setTimerDuration>
		}
		if (isBtnLongPress(BTN_3)){
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff fc19 	bl	800035c <isBtnLongPress>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00d      	beq.n	8000b4c <fsmSet+0x88>
			if (checkTimerFlag(TIMER_SET_LONG)){
 8000b30:	2002      	movs	r0, #2
 8000b32:	f000 ff4b 	bl	80019cc <checkTimerFlag>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d007      	beq.n	8000b4c <fsmSet+0x88>
				increaseDuration(LED_RED);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff ff97 	bl	8000a70 <increaseDuration>
				setTimerDuration(TIMER_SET_LONG, 500);	// wait 500ms for long press
 8000b42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b46:	2002      	movs	r0, #2
 8000b48:	f000 ff26 	bl	8001998 <setTimerDuration>
			}
		}

		if (isBtnPress(BTN_2)){	// Press button 2 switch mode
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fbeb 	bl	8000328 <isBtnPress>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d071      	beq.n	8000c3c <fsmSet+0x178>
			setState = SET_GREEN;
 8000b58:	4b3c      	ldr	r3, [pc, #240]	; (8000c4c <fsmSet+0x188>)
 8000b5a:	222a      	movs	r2, #42	; 0x2a
 8000b5c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000b5e:	e06d      	b.n	8000c3c <fsmSet+0x178>

	//////////////////////////////////////////////////////////////
	case SET_GREEN:
		turnOnLed(TRAFFIC_1, LED_GREEN);
 8000b60:	2101      	movs	r1, #1
 8000b62:	2005      	movs	r0, #5
 8000b64:	f000 f9b2 	bl	8000ecc <turnOnLed>
		turnOnLed(TRAFFIC_2, LED_GREEN);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2006      	movs	r0, #6
 8000b6c:	f000 f9ae 	bl	8000ecc <turnOnLed>
		if (isBtnPress(BTN_3)){
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff fbd9 	bl	8000328 <isBtnPress>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d009      	beq.n	8000b90 <fsmSet+0xcc>
			increaseDuration(LED_GREEN);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff ff77 	bl	8000a70 <increaseDuration>
			clearTimer(TIMER_SET_LONG);
 8000b82:	2002      	movs	r0, #2
 8000b84:	f000 ff3a 	bl	80019fc <clearTimer>
			setTimerDuration(TIMER_SET_LONG, 10);
 8000b88:	210a      	movs	r1, #10
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f000 ff04 	bl	8001998 <setTimerDuration>
		}
		if (isBtnLongPress(BTN_3)){
 8000b90:	2002      	movs	r0, #2
 8000b92:	f7ff fbe3 	bl	800035c <isBtnLongPress>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00d      	beq.n	8000bb8 <fsmSet+0xf4>
			if (checkTimerFlag(TIMER_SET_LONG)){
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f000 ff15 	bl	80019cc <checkTimerFlag>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <fsmSet+0xf4>
				increaseDuration(LED_GREEN);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff ff61 	bl	8000a70 <increaseDuration>
				setTimerDuration(TIMER_SET_LONG, 500);
 8000bae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f000 fef0 	bl	8001998 <setTimerDuration>
			}
		}

		if (isBtnPress(BTN_2))
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff fbb5 	bl	8000328 <isBtnPress>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d03d      	beq.n	8000c40 <fsmSet+0x17c>
			setState = SET_YELLOW;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <fsmSet+0x188>)
 8000bc6:	222b      	movs	r2, #43	; 0x2b
 8000bc8:	701a      	strb	r2, [r3, #0]
		break;
 8000bca:	e039      	b.n	8000c40 <fsmSet+0x17c>

	//////////////////////////////////////////////////////////////
	case SET_YELLOW:
		turnOnLed(TRAFFIC_1, LED_YELLOW);
 8000bcc:	2102      	movs	r1, #2
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f000 f97c 	bl	8000ecc <turnOnLed>
		turnOnLed(TRAFFIC_2, LED_YELLOW);
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	2006      	movs	r0, #6
 8000bd8:	f000 f978 	bl	8000ecc <turnOnLed>
		if (isBtnPress(BTN_3)){
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f7ff fba3 	bl	8000328 <isBtnPress>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d009      	beq.n	8000bfc <fsmSet+0x138>
			increaseDuration(LED_YELLOW);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff ff41 	bl	8000a70 <increaseDuration>
			clearTimer(TIMER_SET_LONG);
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f000 ff04 	bl	80019fc <clearTimer>
			setTimerDuration(TIMER_SET_LONG, 10);
 8000bf4:	210a      	movs	r1, #10
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f000 fece 	bl	8001998 <setTimerDuration>
		}
		if (isBtnLongPress(BTN_3)){
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f7ff fbad 	bl	800035c <isBtnLongPress>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00d      	beq.n	8000c24 <fsmSet+0x160>
			if (checkTimerFlag(TIMER_SET_LONG)){
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f000 fedf 	bl	80019cc <checkTimerFlag>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <fsmSet+0x160>
				increaseDuration(LED_YELLOW);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f7ff ff2b 	bl	8000a70 <increaseDuration>
				setTimerDuration(TIMER_SET_LONG, 500);
 8000c1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f000 feba 	bl	8001998 <setTimerDuration>
			}
		}

		if (isBtnPress(BTN_2))
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff fb7f 	bl	8000328 <isBtnPress>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d009      	beq.n	8000c44 <fsmSet+0x180>
			setState = SET_RED;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <fsmSet+0x188>)
 8000c32:	2229      	movs	r2, #41	; 0x29
 8000c34:	701a      	strb	r2, [r3, #0]
		break;
 8000c36:	e005      	b.n	8000c44 <fsmSet+0x180>

	//////////////////////////////////////////////////////////////
	default:
		break;
 8000c38:	bf00      	nop
 8000c3a:	e004      	b.n	8000c46 <fsmSet+0x182>
		break;
 8000c3c:	bf00      	nop
 8000c3e:	e002      	b.n	8000c46 <fsmSet+0x182>
		break;
 8000c40:	bf00      	nop
 8000c42:	e000      	b.n	8000c46 <fsmSet+0x182>
		break;
 8000c44:	bf00      	nop
	}
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000134 	.word	0x20000134

08000c50 <fsmTraffic>:

/*----------------- global fsm -------------------------*/
void fsmTraffic(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	switch(globalState){
 8000c54:	4b7c      	ldr	r3, [pc, #496]	; (8000e48 <fsmTraffic+0x1f8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	3b0a      	subs	r3, #10
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	f200 80ea 	bhi.w	8000e34 <fsmTraffic+0x1e4>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <fsmTraffic+0x18>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c79 	.word	0x08000c79
 8000c6c:	08000c85 	.word	0x08000c85
 8000c70:	08000cff 	.word	0x08000cff
 8000c74:	08000d23 	.word	0x08000d23
	case INIT_MODE:
		clearAllLed();
 8000c78:	f000 f914 	bl	8000ea4 <clearAllLed>
		globalState = AUTO_MODE;
 8000c7c:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <fsmTraffic+0x1f8>)
 8000c7e:	220b      	movs	r2, #11
 8000c80:	701a      	strb	r2, [r3, #0]
		break;
 8000c82:	e0de      	b.n	8000e42 <fsmTraffic+0x1f2>

	//////////////////////////////////////////////////////
	case AUTO_MODE:
		fsmAutoA();
 8000c84:	f7ff fd8c 	bl	80007a0 <fsmAutoA>
		fsmAutoB();
 8000c88:	f7ff fe16 	bl	80008b8 <fsmAutoB>

		if (isBtnPress(BTN_1)){	// Press button 1 to change mode
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fb4b 	bl	8000328 <isBtnPress>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d030      	beq.n	8000cfa <fsmTraffic+0xaa>
			clearAllLed();
 8000c98:	f000 f904 	bl	8000ea4 <clearAllLed>
			globalState = MANUAL_MODE;
 8000c9c:	4b6a      	ldr	r3, [pc, #424]	; (8000e48 <fsmTraffic+0x1f8>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	701a      	strb	r2, [r3, #0]
			trafficCurDur = 10000;
 8000ca2:	4b6a      	ldr	r3, [pc, #424]	; (8000e4c <fsmTraffic+0x1fc>)
 8000ca4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ca8:	601a      	str	r2, [r3, #0]
			setDuration(DUR_TRAFFIC, 0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fb97 	bl	80003e0 <setDuration>
			switch(autoAState){	// Manual mode with equivalent auto mode
 8000cb2:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <fsmTraffic+0x200>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b17      	cmp	r3, #23
 8000cb8:	d01b      	beq.n	8000cf2 <fsmTraffic+0xa2>
 8000cba:	2b17      	cmp	r3, #23
 8000cbc:	f300 80bc 	bgt.w	8000e38 <fsmTraffic+0x1e8>
 8000cc0:	2b15      	cmp	r3, #21
 8000cc2:	d002      	beq.n	8000cca <fsmTraffic+0x7a>
 8000cc4:	2b16      	cmp	r3, #22
 8000cc6:	d010      	beq.n	8000cea <fsmTraffic+0x9a>
			case AUTO_YELLOW:
				manualState = MN_YELLOW;
				break;
			}
		}
		break;
 8000cc8:	e0b6      	b.n	8000e38 <fsmTraffic+0x1e8>
				switch(autoBState){
 8000cca:	4b62      	ldr	r3, [pc, #392]	; (8000e54 <fsmTraffic+0x204>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b16      	cmp	r3, #22
 8000cd0:	d002      	beq.n	8000cd8 <fsmTraffic+0x88>
 8000cd2:	2b17      	cmp	r3, #23
 8000cd4:	d004      	beq.n	8000ce0 <fsmTraffic+0x90>
				break;
 8000cd6:	e011      	b.n	8000cfc <fsmTraffic+0xac>
					manualState = MN_RED0;
 8000cd8:	4b5f      	ldr	r3, [pc, #380]	; (8000e58 <fsmTraffic+0x208>)
 8000cda:	221f      	movs	r2, #31
 8000cdc:	701a      	strb	r2, [r3, #0]
					break;
 8000cde:	e003      	b.n	8000ce8 <fsmTraffic+0x98>
					manualState = MN_RED1;
 8000ce0:	4b5d      	ldr	r3, [pc, #372]	; (8000e58 <fsmTraffic+0x208>)
 8000ce2:	2220      	movs	r2, #32
 8000ce4:	701a      	strb	r2, [r3, #0]
					break;
 8000ce6:	bf00      	nop
				break;
 8000ce8:	e008      	b.n	8000cfc <fsmTraffic+0xac>
				manualState = MN_GREEN;
 8000cea:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <fsmTraffic+0x208>)
 8000cec:	2221      	movs	r2, #33	; 0x21
 8000cee:	701a      	strb	r2, [r3, #0]
				break;
 8000cf0:	e004      	b.n	8000cfc <fsmTraffic+0xac>
				manualState = MN_YELLOW;
 8000cf2:	4b59      	ldr	r3, [pc, #356]	; (8000e58 <fsmTraffic+0x208>)
 8000cf4:	2222      	movs	r2, #34	; 0x22
 8000cf6:	701a      	strb	r2, [r3, #0]
				break;
 8000cf8:	e000      	b.n	8000cfc <fsmTraffic+0xac>
		}
 8000cfa:	bf00      	nop
		break;
 8000cfc:	e09c      	b.n	8000e38 <fsmTraffic+0x1e8>

	////////////////////////////////////////////////////
	case MANUAL_MODE:
		fsmManual();
 8000cfe:	f7ff fe41 	bl	8000984 <fsmManual>

		if (isBtnPress(BTN_1)){	// Switch to set mode
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fb10 	bl	8000328 <isBtnPress>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8096 	beq.w	8000e3c <fsmTraffic+0x1ec>
			globalState = SET_MODE;
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <fsmTraffic+0x1f8>)
 8000d12:	220d      	movs	r2, #13
 8000d14:	701a      	strb	r2, [r3, #0]
			setState = SET_INIT;
 8000d16:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <fsmTraffic+0x20c>)
 8000d18:	2228      	movs	r2, #40	; 0x28
 8000d1a:	701a      	strb	r2, [r3, #0]
			clearAllLed();
 8000d1c:	f000 f8c2 	bl	8000ea4 <clearAllLed>
		}
		break;
 8000d20:	e08c      	b.n	8000e3c <fsmTraffic+0x1ec>

	//////////////////////////////////////////////////////
	case SET_MODE:
		fsmSet();
 8000d22:	f7ff fecf 	bl	8000ac4 <fsmSet>

		if (isBtnPress(BTN_1)){
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fafe 	bl	8000328 <isBtnPress>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d07e      	beq.n	8000e30 <fsmTraffic+0x1e0>
			globalState = AUTO_MODE;
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <fsmTraffic+0x1f8>)
 8000d34:	220b      	movs	r2, #11
 8000d36:	701a      	strb	r2, [r3, #0]
			clearAllLed();
 8000d38:	f000 f8b4 	bl	8000ea4 <clearAllLed>
			clearTimer(TIMER_AUTO_A);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 fe5d 	bl	80019fc <clearTimer>
			clearTimer(TIMER_AUTO_B);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 fe5a 	bl	80019fc <clearTimer>
			switch(manualState){	// Auto mode equivalent to previous set mode
 8000d48:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <fsmTraffic+0x208>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3b1f      	subs	r3, #31
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d876      	bhi.n	8000e40 <fsmTraffic+0x1f0>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <fsmTraffic+0x108>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d9b 	.word	0x08000d9b
 8000d60:	08000dcd 	.word	0x08000dcd
 8000d64:	08000dff 	.word	0x08000dff
			case MN_RED0:
				autoAState = AUTO_RED;
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <fsmTraffic+0x200>)
 8000d6a:	2215      	movs	r2, #21
 8000d6c:	701a      	strb	r2, [r3, #0]
				setTimerDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000d6e:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <fsmTraffic+0x210>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 fe0f 	bl	8001998 <setTimerDuration>
				setDuration(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <fsmTraffic+0x210>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fb2d 	bl	80003e0 <setDuration>

				autoBState = AUTO_GREEN;
 8000d86:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <fsmTraffic+0x204>)
 8000d88:	2216      	movs	r2, #22
 8000d8a:	701a      	strb	r2, [r3, #0]
				setTimerDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000d8c:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <fsmTraffic+0x210>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4619      	mov	r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 fe00 	bl	8001998 <setTimerDuration>
				break;
 8000d98:	e04b      	b.n	8000e32 <fsmTraffic+0x1e2>
			///////////////////////////////////////////////////
			case MN_RED1:
				autoAState = AUTO_RED;
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <fsmTraffic+0x200>)
 8000d9c:	2215      	movs	r2, #21
 8000d9e:	701a      	strb	r2, [r3, #0]
				setTimerDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <fsmTraffic+0x210>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4619      	mov	r1, r3
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 fdf6 	bl	8001998 <setTimerDuration>
				setDuration(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <fsmTraffic+0x210>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4619      	mov	r1, r3
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fb14 	bl	80003e0 <setDuration>

				autoBState = AUTO_YELLOW;
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <fsmTraffic+0x204>)
 8000dba:	2217      	movs	r2, #23
 8000dbc:	701a      	strb	r2, [r3, #0]
				setTimerDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <fsmTraffic+0x210>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f000 fde7 	bl	8001998 <setTimerDuration>
				break;
 8000dca:	e032      	b.n	8000e32 <fsmTraffic+0x1e2>

			///////////////////////////////////////////////////
			case MN_GREEN:
				autoAState = AUTO_GREEN;
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <fsmTraffic+0x200>)
 8000dce:	2216      	movs	r2, #22
 8000dd0:	701a      	strb	r2, [r3, #0]
				setTimerDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <fsmTraffic+0x210>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 fddd 	bl	8001998 <setTimerDuration>
				setDuration(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <fsmTraffic+0x210>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4619      	mov	r1, r3
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fafb 	bl	80003e0 <setDuration>

				autoBState = AUTO_RED;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <fsmTraffic+0x204>)
 8000dec:	2215      	movs	r2, #21
 8000dee:	701a      	strb	r2, [r3, #0]
				setTimerDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <fsmTraffic+0x210>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 fdce 	bl	8001998 <setTimerDuration>
				break;
 8000dfc:	e019      	b.n	8000e32 <fsmTraffic+0x1e2>

			///////////////////////////////////////////////////
			case MN_YELLOW:
				autoAState = AUTO_YELLOW;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <fsmTraffic+0x200>)
 8000e00:	2217      	movs	r2, #23
 8000e02:	701a      	strb	r2, [r3, #0]
				setTimerDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <fsmTraffic+0x210>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 fdc4 	bl	8001998 <setTimerDuration>
				setDuration(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <fsmTraffic+0x210>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4619      	mov	r1, r3
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fae2 	bl	80003e0 <setDuration>

				autoBState = AUTO_RED;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <fsmTraffic+0x204>)
 8000e1e:	2215      	movs	r2, #21
 8000e20:	701a      	strb	r2, [r3, #0]
				setTimerDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <fsmTraffic+0x210>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4619      	mov	r1, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f000 fdb5 	bl	8001998 <setTimerDuration>
				break;
 8000e2e:	e000      	b.n	8000e32 <fsmTraffic+0x1e2>
			}
		}
 8000e30:	bf00      	nop
		break;
 8000e32:	e005      	b.n	8000e40 <fsmTraffic+0x1f0>

	///////////////////////////////////////////////
	default:
		break;
 8000e34:	bf00      	nop
 8000e36:	e004      	b.n	8000e42 <fsmTraffic+0x1f2>
		break;
 8000e38:	bf00      	nop
 8000e3a:	e002      	b.n	8000e42 <fsmTraffic+0x1f2>
		break;
 8000e3c:	bf00      	nop
 8000e3e:	e000      	b.n	8000e42 <fsmTraffic+0x1f2>
		break;
 8000e40:	bf00      	nop
	}
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000130 	.word	0x20000130
 8000e4c:	2000012c 	.word	0x2000012c
 8000e50:	20000131 	.word	0x20000131
 8000e54:	20000132 	.word	0x20000132
 8000e58:	20000133 	.word	0x20000133
 8000e5c:	20000134 	.word	0x20000134
 8000e60:	20000050 	.word	0x20000050

08000e64 <isSetMode>:

uint8_t isSetMode(){
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	if (globalState == SET_MODE)
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <isSetMode+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b0d      	cmp	r3, #13
 8000e6e:	d101      	bne.n	8000e74 <isSetMode+0x10>
		return 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <isSetMode+0x12>
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000130 	.word	0x20000130

08000e84 <getTotalDuration>:
uint8_t buzzerState = 0;

// Duration array of 3 color
uint32_t trafficDuration[3] = {5000, 3000, 2000};

uint32_t getTotalDuration(){
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	return trafficDuration[0] + trafficDuration[1] + trafficDuration[2];
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <getTotalDuration+0x1c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <getTotalDuration+0x1c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	441a      	add	r2, r3
 8000e92:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <getTotalDuration+0x1c>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4413      	add	r3, r2
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	20000050 	.word	0x20000050

08000ea4 <clearAllLed>:

#include "led.h"
#include "main.h"
#include "global.h"

void clearAllLed(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin|TR_LED_A_0_Pin, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <clearAllLed+0x20>)
 8000eb0:	f001 f947 	bl	8002142 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <clearAllLed+0x24>)
 8000ebc:	f001 f941 	bl	8002142 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <turnOnLed>:

// Bật đèn cụ thể với màu sắc cụ thể
void turnOnLed(uint8_t ledIndex, uint8_t ledType){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
	switch(ledIndex){
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b07      	cmp	r3, #7
 8000ee0:	d063      	beq.n	8000faa <turnOnLed+0xde>
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	f300 8093 	bgt.w	800100e <turnOnLed+0x142>
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d002      	beq.n	8000ef2 <turnOnLed+0x26>
 8000eec:	2b06      	cmp	r3, #6
 8000eee:	d030      	beq.n	8000f52 <turnOnLed+0x86>
				break;
			}
			break;
		//////////////////////////////////////////////////////////////////
		default:
			break;
 8000ef0:	e08d      	b.n	800100e <turnOnLed+0x142>
		switch(ledType){
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d01f      	beq.n	8000f38 <turnOnLed+0x6c>
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	f300 808a 	bgt.w	8001012 <turnOnLed+0x146>
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <turnOnLed+0x3c>
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d00c      	beq.n	8000f20 <turnOnLed+0x54>
		break;
 8000f06:	e084      	b.n	8001012 <turnOnLed+0x146>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0e:	4845      	ldr	r0, [pc, #276]	; (8001024 <turnOnLed+0x158>)
 8000f10:	f001 f917 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2108      	movs	r1, #8
 8000f18:	4843      	ldr	r0, [pc, #268]	; (8001028 <turnOnLed+0x15c>)
 8000f1a:	f001 f912 	bl	8002142 <HAL_GPIO_WritePin>
			break;
 8000f1e:	e017      	b.n	8000f50 <turnOnLed+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f26:	483f      	ldr	r0, [pc, #252]	; (8001024 <turnOnLed+0x158>)
 8000f28:	f001 f90b 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2108      	movs	r1, #8
 8000f30:	483d      	ldr	r0, [pc, #244]	; (8001028 <turnOnLed+0x15c>)
 8000f32:	f001 f906 	bl	8002142 <HAL_GPIO_WritePin>
			break;
 8000f36:	e00b      	b.n	8000f50 <turnOnLed+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3e:	4839      	ldr	r0, [pc, #228]	; (8001024 <turnOnLed+0x158>)
 8000f40:	f001 f8ff 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2108      	movs	r1, #8
 8000f48:	4837      	ldr	r0, [pc, #220]	; (8001028 <turnOnLed+0x15c>)
 8000f4a:	f001 f8fa 	bl	8002142 <HAL_GPIO_WritePin>
			break;
 8000f4e:	bf00      	nop
		break;
 8000f50:	e05f      	b.n	8001012 <turnOnLed+0x146>
		switch(ledType){
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d01c      	beq.n	8000f92 <turnOnLed+0xc6>
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	dc5c      	bgt.n	8001016 <turnOnLed+0x14a>
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <turnOnLed+0x9a>
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d00b      	beq.n	8000f7c <turnOnLed+0xb0>
		break;
 8000f64:	e057      	b.n	8001016 <turnOnLed+0x14a>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, 1);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2120      	movs	r1, #32
 8000f6a:	482f      	ldr	r0, [pc, #188]	; (8001028 <turnOnLed+0x15c>)
 8000f6c:	f001 f8e9 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	482c      	ldr	r0, [pc, #176]	; (8001028 <turnOnLed+0x15c>)
 8000f76:	f001 f8e4 	bl	8002142 <HAL_GPIO_WritePin>
			break;
 8000f7a:	e015      	b.n	8000fa8 <turnOnLed+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2120      	movs	r1, #32
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <turnOnLed+0x15c>)
 8000f82:	f001 f8de 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2110      	movs	r1, #16
 8000f8a:	4827      	ldr	r0, [pc, #156]	; (8001028 <turnOnLed+0x15c>)
 8000f8c:	f001 f8d9 	bl	8002142 <HAL_GPIO_WritePin>
			break;
 8000f90:	e00a      	b.n	8000fa8 <turnOnLed+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, 1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2120      	movs	r1, #32
 8000f96:	4824      	ldr	r0, [pc, #144]	; (8001028 <turnOnLed+0x15c>)
 8000f98:	f001 f8d3 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <turnOnLed+0x15c>)
 8000fa2:	f001 f8ce 	bl	8002142 <HAL_GPIO_WritePin>
			break;
 8000fa6:	bf00      	nop
		break;
 8000fa8:	e035      	b.n	8001016 <turnOnLed+0x14a>
			switch(ledType){
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d020      	beq.n	8000ff2 <turnOnLed+0x126>
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	dc32      	bgt.n	800101a <turnOnLed+0x14e>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <turnOnLed+0xf2>
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d00d      	beq.n	8000fd8 <turnOnLed+0x10c>
			break;
 8000fbc:	e02d      	b.n	800101a <turnOnLed+0x14e>
				HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4818      	ldr	r0, [pc, #96]	; (8001028 <turnOnLed+0x15c>)
 8000fc6:	f001 f8bc 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <turnOnLed+0x158>)
 8000fd2:	f001 f8b6 	bl	8002142 <HAL_GPIO_WritePin>
				break;
 8000fd6:	e019      	b.n	800100c <turnOnLed+0x140>
				HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fde:	4812      	ldr	r0, [pc, #72]	; (8001028 <turnOnLed+0x15c>)
 8000fe0:	f001 f8af 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <turnOnLed+0x158>)
 8000fec:	f001 f8a9 	bl	8002142 <HAL_GPIO_WritePin>
				break;
 8000ff0:	e00c      	b.n	800100c <turnOnLed+0x140>
				HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <turnOnLed+0x15c>)
 8000ffa:	f001 f8a2 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <turnOnLed+0x158>)
 8001006:	f001 f89c 	bl	8002142 <HAL_GPIO_WritePin>
				break;
 800100a:	bf00      	nop
			break;
 800100c:	e005      	b.n	800101a <turnOnLed+0x14e>
			break;
 800100e:	bf00      	nop
 8001010:	e004      	b.n	800101c <turnOnLed+0x150>
		break;
 8001012:	bf00      	nop
 8001014:	e002      	b.n	800101c <turnOnLed+0x150>
		break;
 8001016:	bf00      	nop
 8001018:	e000      	b.n	800101c <turnOnLed+0x150>
			break;
 800101a:	bf00      	nop
	}
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00

0800102c <turnOffLed>:

void turnOffLed(uint8_t ledIndex){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	switch(ledIndex){
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b07      	cmp	r3, #7
 800103a:	d01d      	beq.n	8001078 <turnOffLed+0x4c>
 800103c:	2b07      	cmp	r3, #7
 800103e:	dc28      	bgt.n	8001092 <turnOffLed+0x66>
 8001040:	2b05      	cmp	r3, #5
 8001042:	d002      	beq.n	800104a <turnOffLed+0x1e>
 8001044:	2b06      	cmp	r3, #6
 8001046:	d00c      	beq.n	8001062 <turnOffLed+0x36>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, 0);
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 8001048:	e023      	b.n	8001092 <turnOffLed+0x66>
		HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001050:	4812      	ldr	r0, [pc, #72]	; (800109c <turnOffLed+0x70>)
 8001052:	f001 f876 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2108      	movs	r1, #8
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <turnOffLed+0x74>)
 800105c:	f001 f871 	bl	8002142 <HAL_GPIO_WritePin>
		break;
 8001060:	e018      	b.n	8001094 <turnOffLed+0x68>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2120      	movs	r1, #32
 8001066:	480e      	ldr	r0, [pc, #56]	; (80010a0 <turnOffLed+0x74>)
 8001068:	f001 f86b 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2110      	movs	r1, #16
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <turnOffLed+0x74>)
 8001072:	f001 f866 	bl	8002142 <HAL_GPIO_WritePin>
		break;
 8001076:	e00d      	b.n	8001094 <turnOffLed+0x68>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <turnOffLed+0x74>)
 8001080:	f001 f85f 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <turnOffLed+0x70>)
 800108c:	f001 f859 	bl	8002142 <HAL_GPIO_WritePin>
		break;
 8001090:	e000      	b.n	8001094 <turnOffLed+0x68>
		break;
 8001092:	bf00      	nop
	}
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010800 	.word	0x40010800
 80010a0:	40010c00 	.word	0x40010c00

080010a4 <blinkPdLed>:

void blinkPdLed(uint8_t ledType){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	if (pdLedState == PD_LED_ON)
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <blinkPdLed+0x2c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b47      	cmp	r3, #71	; 0x47
 80010b4:	d105      	bne.n	80010c2 <blinkPdLed+0x1e>
		turnOnLed(PEDESTRIAN, ledType);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4619      	mov	r1, r3
 80010ba:	2007      	movs	r0, #7
 80010bc:	f7ff ff06 	bl	8000ecc <turnOnLed>
	else
		turnOffLed(PEDESTRIAN);
}
 80010c0:	e002      	b.n	80010c8 <blinkPdLed+0x24>
		turnOffLed(PEDESTRIAN);
 80010c2:	2007      	movs	r0, #7
 80010c4:	f7ff ffb2 	bl	800102c <turnOffLed>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000136 	.word	0x20000136

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f000 fd28 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f81e 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 f94a 	bl	8001378 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010e4:	f000 f91e 	bl	8001324 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010e8:	f000 f85a 	bl	80011a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010ec:	f000 f8a4 	bl	8001238 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <main+0x40>)
 80010f2:	f001 fccb 	bl	8002a8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f6:	2100      	movs	r1, #0
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <main+0x44>)
 80010fa:	f001 fd71 	bl	8002be0 <HAL_TIM_PWM_Start>
  initTimer();
 80010fe:	f000 fc0b 	bl	8001918 <initTimer>
  initTraffic();
 8001102:	f7ff faff 	bl	8000704 <initTraffic>
  initPedestrian();
 8001106:	f7ff f9d7 	bl	80004b8 <initPedestrian>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsmTraffic();
 800110a:	f7ff fda1 	bl	8000c50 <fsmTraffic>
	  fsmPedestrian();
 800110e:	f7ff fa97 	bl	8000640 <fsmPedestrian>
	  fsmTraffic();
 8001112:	e7fa      	b.n	800110a <main+0x36>
 8001114:	200001c8 	.word	0x200001c8
 8001118:	20000178 	.word	0x20000178

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b090      	sub	sp, #64	; 0x40
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	2228      	movs	r2, #40	; 0x28
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fe16 	bl	8003d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001142:	2301      	movs	r3, #1
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001146:	2310      	movs	r3, #16
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800114e:	2300      	movs	r3, #0
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001152:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	4618      	mov	r0, r3
 800115e:	f001 f82b 	bl	80021b8 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001168:	f000 f9b4 	bl	80014d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2102      	movs	r1, #2
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fa96 	bl	80026b8 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001192:	f000 f99f 	bl	80014d4 <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3740      	adds	r7, #64	; 0x40
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_TIM2_Init+0x94>)
 80011be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_TIM2_Init+0x94>)
 80011c6:	223f      	movs	r2, #63	; 0x3f
 80011c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_TIM2_Init+0x94>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_TIM2_Init+0x94>)
 80011d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80011d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_TIM2_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_TIM2_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e4:	4813      	ldr	r0, [pc, #76]	; (8001234 <MX_TIM2_Init+0x94>)
 80011e6:	f001 fc01 	bl	80029ec <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f0:	f000 f970 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_TIM2_Init+0x94>)
 8001202:	f001 ff55 	bl	80030b0 <HAL_TIM_ConfigClockSource>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800120c:	f000 f962 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_TIM2_Init+0x94>)
 800121e:	f002 fad3 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001228:	f000 f954 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200001c8 	.word	0x200001c8

08001238 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <MX_TIM3_Init+0xe4>)
 800126a:	4a2d      	ldr	r2, [pc, #180]	; (8001320 <MX_TIM3_Init+0xe8>)
 800126c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <MX_TIM3_Init+0xe4>)
 8001270:	223f      	movs	r2, #63	; 0x3f
 8001272:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <MX_TIM3_Init+0xe4>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <MX_TIM3_Init+0xe4>)
 800127c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001280:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_TIM3_Init+0xe4>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <MX_TIM3_Init+0xe4>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800128e:	4823      	ldr	r0, [pc, #140]	; (800131c <MX_TIM3_Init+0xe4>)
 8001290:	f001 fbac 	bl	80029ec <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800129a:	f000 f91b 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a8:	4619      	mov	r1, r3
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <MX_TIM3_Init+0xe4>)
 80012ac:	f001 ff00 	bl	80030b0 <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012b6:	f000 f90d 	bl	80014d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012ba:	4818      	ldr	r0, [pc, #96]	; (800131c <MX_TIM3_Init+0xe4>)
 80012bc:	f001 fc38 	bl	8002b30 <HAL_TIM_PWM_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012c6:	f000 f905 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	4619      	mov	r1, r3
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <MX_TIM3_Init+0xe4>)
 80012da:	f002 fa75 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012e4:	f000 f8f6 	bl	80014d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e8:	2360      	movs	r3, #96	; 0x60
 80012ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	4619      	mov	r1, r3
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM3_Init+0xe4>)
 8001300:	f001 fe18 	bl	8002f34 <HAL_TIM_PWM_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800130a:	f000 f8e3 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800130e:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM3_Init+0xe4>)
 8001310:	f000 f950 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8001314:	bf00      	nop
 8001316:	3738      	adds	r7, #56	; 0x38
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000178 	.word	0x20000178
 8001320:	40000400 	.word	0x40000400

08001324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_USART2_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800135c:	f002 faa4 	bl	80038a8 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f000 f8b5 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000218 	.word	0x20000218
 8001374:	40004400 	.word	0x40004400

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <MX_GPIO_Init+0x12c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a44      	ldr	r2, [pc, #272]	; (80014a4 <MX_GPIO_Init+0x12c>)
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <MX_GPIO_Init+0x12c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013aa:	f043 0320 	orr.w	r3, r3, #32
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a38      	ldr	r2, [pc, #224]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a32      	ldr	r2, [pc, #200]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <MX_GPIO_Init+0x12c>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80013f2:	482d      	ldr	r0, [pc, #180]	; (80014a8 <MX_GPIO_Init+0x130>)
 80013f4:	f000 fea5 	bl	8002142 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013fe:	482b      	ldr	r0, [pc, #172]	; (80014ac <MX_GPIO_Init+0x134>)
 8001400:	f000 fe9f 	bl	8002142 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <MX_GPIO_Init+0x138>)
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	4826      	ldr	r0, [pc, #152]	; (80014b4 <MX_GPIO_Init+0x13c>)
 800141a:	f000 fcf7 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_BTN_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = PD_BTN_Pin|BTN_1_Pin|BTN_2_Pin;
 800141e:	2313      	movs	r3, #19
 8001420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001426:	2301      	movs	r3, #1
 8001428:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	481d      	ldr	r0, [pc, #116]	; (80014a8 <MX_GPIO_Init+0x130>)
 8001432:	f000 fceb 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PD_LED_1_Pin TR_LED_A_0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin;
 8001436:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	4816      	ldr	r0, [pc, #88]	; (80014a8 <MX_GPIO_Init+0x130>)
 8001450:	f000 fcdc 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_3_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	4811      	ldr	r0, [pc, #68]	; (80014ac <MX_GPIO_Init+0x134>)
 8001468:	f000 fcd0 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_LED_0_Pin TR_LED_A_1_Pin TR_LED_B_1_Pin TR_LED_B_0_Pin */
  GPIO_InitStruct.Pin = PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin;
 800146c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2302      	movs	r3, #2
 800147c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4619      	mov	r1, r3
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <MX_GPIO_Init+0x134>)
 8001486:	f000 fcc1 	bl	8001e0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2028      	movs	r0, #40	; 0x28
 8001490:	f000 fc85 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001494:	2028      	movs	r0, #40	; 0x28
 8001496:	f000 fc9e 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	10110000 	.word	0x10110000
 80014b4:	40011000 	.word	0x40011000

080014b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	runTimer();
 80014c0:	f000 fa38 	bl	8001934 <runTimer>
	readButton();
 80014c4:	f7fe fe42 	bl	800014c <readButton>
	runDuration();
 80014c8:	f7fe ffd8 	bl	800047c <runDuration>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_MspInit+0x5c>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_MspInit+0x5c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_MspInit+0x5c>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_MspInit+0x5c>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_MspInit+0x5c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_MspInit+0x5c>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_MspInit+0x60>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_MspInit+0x60>)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d114      	bne.n	8001580 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_TIM_Base_MspInit+0x68>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_TIM_Base_MspInit+0x68>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_TIM_Base_MspInit+0x68>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	201c      	movs	r0, #28
 8001574:	f000 fc13 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001578:	201c      	movs	r0, #28
 800157a:	f000 fc2c 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800157e:	e010      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10b      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_TIM_Base_MspInit+0x68>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_TIM_Base_MspInit+0x68>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_TIM_Base_MspInit+0x68>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40000400 	.word	0x40000400

080015b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_TIM_MspPostInit+0x58>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d117      	bne.n	8001604 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_TIM_MspPostInit+0x5c>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_TIM_MspPostInit+0x5c>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_TIM_MspPostInit+0x5c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PD_BUZZER_Pin;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_TIM_MspPostInit+0x60>)
 8001600:	f000 fc04 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40000400 	.word	0x40000400
 8001610:	40021000 	.word	0x40021000
 8001614:	40010800 	.word	0x40010800

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <HAL_UART_MspInit+0x70>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d123      	bne.n	8001680 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_UART_MspInit+0x74>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	4a13      	ldr	r2, [pc, #76]	; (800168c <HAL_UART_MspInit+0x74>)
 800163e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001642:	61d3      	str	r3, [r2, #28]
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_UART_MspInit+0x74>)
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_UART_MspInit+0x74>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_UART_MspInit+0x74>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_UART_MspInit+0x74>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001668:	230c      	movs	r3, #12
 800166a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2302      	movs	r3, #2
 8001672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_UART_MspInit+0x78>)
 800167c:	f000 fbc6 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40004400 	.word	0x40004400
 800168c:	40021000 	.word	0x40021000
 8001690:	40010800 	.word	0x40010800

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f000 fa6d 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM2_IRQHandler+0x10>)
 80016ea:	f001 fb1b 	bl	8002d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200001c8 	.word	0x200001c8

080016f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001700:	f000 fd38 	bl	8002174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f002 fad6 	bl	8003ce8 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20005000 	.word	0x20005000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000138 	.word	0x20000138
 8001770:	20000270 	.word	0x20000270

08001774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <timerUnitConstruct>:
#include "timer.h"

struct timerList listTimer;
uint8_t timerFlag[MAX_TIMER] = {0};	// Array timer flag

struct timerUnit* timerUnitConstruct(uint8_t index, uint32_t duration){
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
	struct timerUnit *newUnit = malloc(sizeof(struct timerUnit));	// Dynamic allocate a new timerUnit
 800178c:	2008      	movs	r0, #8
 800178e:	f002 fad5 	bl	8003d3c <malloc>
 8001792:	4603      	mov	r3, r0
 8001794:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL)	// if allocation fail, return
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <timerUnitConstruct+0x20>
		return NULL;
 800179c:	2300      	movs	r3, #0
 800179e:	e00a      	b.n	80017b6 <timerUnitConstruct+0x36>
	newUnit->index = index;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	705a      	strb	r2, [r3, #1]
	newUnit->nextTimer = NULL;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
	return newUnit;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <timerUnitDestruct>:

void timerUnitDestruct(struct timerUnit* unit){
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
	free(unit);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f002 fac0 	bl	8003d4c <free>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <SCH_ListAdd>:

void SCH_ListAdd(struct timerUnit* unit){
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	// If list is full, return
	if (listTimer.size == MAX_TIMER)
 80017dc:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <SCH_ListAdd+0x104>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b06      	cmp	r3, #6
 80017e2:	d073      	beq.n	80018cc <SCH_ListAdd+0xf8>
		return;
	// If list empty, assign to head
	if (listTimer.size == 0){
 80017e4:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <SCH_ListAdd+0x104>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <SCH_ListAdd+0x2c>
		listTimer.head = unit;
 80017ec:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <SCH_ListAdd+0x104>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6053      	str	r3, [r2, #4]
		listTimer.size++;
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <SCH_ListAdd+0x104>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <SCH_ListAdd+0x104>)
 80017fc:	701a      	strb	r2, [r3, #0]
		return;
 80017fe:	e066      	b.n	80018ce <SCH_ListAdd+0xfa>
	}

	struct timerUnit *curr = listTimer.head,
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <SCH_ListAdd+0x104>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	617b      	str	r3, [r7, #20]
			  *prev = NULL;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
	while (curr != NULL){	// Iterate list
 800180e:	e010      	b.n	8001832 <SCH_ListAdd+0x5e>
		totalDuration += curr->duration;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	461a      	mov	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4293      	cmp	r3, r2
 8001826:	d808      	bhi.n	800183a <SCH_ListAdd+0x66>
			break;
		prev = curr;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	617b      	str	r3, [r7, #20]
	while (curr != NULL){	// Iterate list
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1eb      	bne.n	8001810 <SCH_ListAdd+0x3c>
 8001838:	e000      	b.n	800183c <SCH_ListAdd+0x68>
			break;
 800183a:	bf00      	nop
	}
	// Unit được thêm vào trước head
	if (prev == NULL){
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d114      	bne.n	800186c <SCH_ListAdd+0x98>
		unit->nextTimer = curr;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	605a      	str	r2, [r3, #4]
		curr->duration -= unit->duration;	// Giảm duration bằng duration unit
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	785a      	ldrb	r2, [r3, #1]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	b2da      	uxtb	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	705a      	strb	r2, [r3, #1]
		listTimer.head = unit;
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <SCH_ListAdd+0x104>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6053      	str	r3, [r2, #4]
		listTimer.size++;
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <SCH_ListAdd+0x104>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <SCH_ListAdd+0x104>)
 8001868:	701a      	strb	r2, [r3, #0]
		return;
 800186a:	e030      	b.n	80018ce <SCH_ListAdd+0xfa>
	}
	prev->nextTimer = unit;
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
	unit->nextTimer = curr;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	605a      	str	r2, [r3, #4]
	if (curr == NULL)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d108      	bne.n	8001890 <SCH_ListAdd+0xbc>
		unit->duration -= totalDuration;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	785a      	ldrb	r2, [r3, #1]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	b2da      	uxtb	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	705a      	strb	r2, [r3, #1]
 800188e:	e016      	b.n	80018be <SCH_ListAdd+0xea>
	else {
		uint32_t tmp = unit->duration;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	785a      	ldrb	r2, [r3, #1]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	7859      	ldrb	r1, [r3, #1]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	1acb      	subs	r3, r1, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	705a      	strb	r2, [r3, #1]
		curr->duration = (totalDuration - tmp);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	705a      	strb	r2, [r3, #1]
	}
	listTimer.size++;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SCH_ListAdd+0x104>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SCH_ListAdd+0x104>)
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	e000      	b.n	80018ce <SCH_ListAdd+0xfa>
		return;
 80018cc:	bf00      	nop
}
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000210 	.word	0x20000210

080018dc <SCH_Pop>:

void SCH_Pop(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	if (listTimer.size == 0)	// If list empty
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <SCH_Pop+0x38>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d010      	beq.n	800190c <SCH_Pop+0x30>
		return;

	struct timerUnit* delUnit = listTimer.head;
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <SCH_Pop+0x38>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	607b      	str	r3, [r7, #4]
	listTimer.head = delUnit->nextTimer;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <SCH_Pop+0x38>)
 80018f6:	6053      	str	r3, [r2, #4]
	timerUnitDestruct(delUnit);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff60 	bl	80017be <timerUnitDestruct>
	listTimer.size--;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SCH_Pop+0x38>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	3b01      	subs	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <SCH_Pop+0x38>)
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	e000      	b.n	800190e <SCH_Pop+0x32>
		return;
 800190c:	bf00      	nop
}
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000210 	.word	0x20000210

08001918 <initTimer>:

void initTimer(){
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	listTimer.head = NULL;
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <initTimer+0x18>)
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
	listTimer.size = 0;
 8001922:	4b03      	ldr	r3, [pc, #12]	; (8001930 <initTimer+0x18>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000210 	.word	0x20000210

08001934 <runTimer>:

void runTimer(){
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
	if (listTimer.size == 0)
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <runTimer+0x5c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d021      	beq.n	8001986 <runTimer+0x52>
		return;

	if (listTimer.head->duration >= 0){
		listTimer.head->duration--;
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <runTimer+0x5c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	785a      	ldrb	r2, [r3, #1]
 8001948:	3a01      	subs	r2, #1
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	705a      	strb	r2, [r3, #1]
		if (listTimer.head->duration <= 0){
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <runTimer+0x5c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	785b      	ldrb	r3, [r3, #1]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d117      	bne.n	8001988 <runTimer+0x54>
			uint8_t index = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	71fb      	strb	r3, [r7, #7]
			// Pop list cho tới khi duration > 0, đồng thời flag timer tương ứng
			while (listTimer.size && listTimer.head->duration == 0){
 800195c:	e009      	b.n	8001972 <runTimer+0x3e>
				index = listTimer.head->index;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <runTimer+0x5c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <runTimer+0x60>)
 800196a:	2101      	movs	r1, #1
 800196c:	54d1      	strb	r1, [r2, r3]
				SCH_Pop();
 800196e:	f7ff ffb5 	bl	80018dc <SCH_Pop>
			while (listTimer.size && listTimer.head->duration == 0){
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <runTimer+0x5c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <runTimer+0x54>
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <runTimer+0x5c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ec      	beq.n	800195e <runTimer+0x2a>
 8001984:	e000      	b.n	8001988 <runTimer+0x54>
		return;
 8001986:	bf00      	nop
			}
		}
	}
}
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000210 	.word	0x20000210
 8001994:	2000013c 	.word	0x2000013c

08001998 <setTimerDuration>:

void setTimerDuration(uint8_t index, uint32_t duration){
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
	struct timerUnit* newUnit = timerUnitConstruct(index, duration / CYCLE);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <setTimerDuration+0x30>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fee4 	bl	8001780 <timerUnitConstruct>
 80019b8:	60f8      	str	r0, [r7, #12]
	SCH_ListAdd(newUnit);
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff ff0a 	bl	80017d4 <SCH_ListAdd>
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	cccccccd 	.word	0xcccccccd

080019cc <checkTimerFlag>:

uint8_t checkTimerFlag(uint8_t index){
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1){
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <checkTimerFlag+0x2c>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <checkTimerFlag+0x20>
		timerFlag[index] = 0;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <checkTimerFlag+0x2c>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	54d1      	strb	r1, [r2, r3]
		return 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <checkTimerFlag+0x22>
	}
	return 0;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	2000013c 	.word	0x2000013c

080019fc <clearTimer>:

// Delete a specific type of timer
void clearTimer(uint8_t index){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
	timerFlag[index] = 0;
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <clearTimer+0x94>)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	54d1      	strb	r1, [r2, r3]
	struct timerUnit *curr = listTimer.head,
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <clearTimer+0x98>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
			  *prev = NULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
	// Iterate to the end of list
	while (curr != NULL){
 8001a18:	e009      	b.n	8001a2e <clearTimer+0x32>
		if (curr->index == index)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d008      	beq.n	8001a36 <clearTimer+0x3a>
			break;
		prev = curr;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
	while (curr != NULL){
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f2      	bne.n	8001a1a <clearTimer+0x1e>
 8001a34:	e000      	b.n	8001a38 <clearTimer+0x3c>
			break;
 8001a36:	bf00      	nop
	}

	if (curr == NULL)	// Iterate đến cuối vẫn k tìm thấy
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d023      	beq.n	8001a86 <clearTimer+0x8a>
		return;
	if (prev == NULL)	// Index nằm ở head của list
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d104      	bne.n	8001a4e <clearTimer+0x52>
		listTimer.head = curr->nextTimer;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <clearTimer+0x98>)
 8001a4a:	6053      	str	r3, [r2, #4]
 8001a4c:	e003      	b.n	8001a56 <clearTimer+0x5a>
	else
		prev->nextTimer = curr->nextTimer;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	605a      	str	r2, [r3, #4]

	// Cộng thêm vào phần duration của timer vừa xóa đi, trong trường hợp phía sau vẫn còn timer
	if (curr->nextTimer != NULL)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <clearTimer+0x76>
		curr->nextTimer->duration += curr->duration;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	7859      	ldrb	r1, [r3, #1]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	785a      	ldrb	r2, [r3, #1]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	440a      	add	r2, r1
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	705a      	strb	r2, [r3, #1]
	timerUnitDestruct(curr);
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff fea3 	bl	80017be <timerUnitDestruct>
	listTimer.size--;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <clearTimer+0x98>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <clearTimer+0x98>)
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e000      	b.n	8001a88 <clearTimer+0x8c>
		return;
 8001a86:	bf00      	nop
}
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000013c 	.word	0x2000013c
 8001a94:	20000210 	.word	0x20000210

08001a98 <sendUartNumber>:
	sprintf(txData, "HELLO!\r\n");
	HAL_UART_Transmit(&huart2, &txData, sizeof(txData), 1000);
	HAL_UART_Receive_IT(&huart2, &rxData, 1);
}

void sendUartNumber(char str[], uint32_t data){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	sprintf(txData, "%s%ld\r\n", str, data);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <sendUartNumber+0x38>)
 8001aa8:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <sendUartNumber+0x3c>)
 8001aaa:	f002 fa15 	bl	8003ed8 <siprintf>
	HAL_UART_Transmit(&huart2, txData, sizeof(txData), 1000);
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	2228      	movs	r2, #40	; 0x28
 8001ab4:	4907      	ldr	r1, [pc, #28]	; (8001ad4 <sendUartNumber+0x3c>)
 8001ab6:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <sendUartNumber+0x40>)
 8001ab8:	f001 ff43 	bl	8003942 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	4907      	ldr	r1, [pc, #28]	; (8001adc <sendUartNumber+0x44>)
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <sendUartNumber+0x40>)
 8001ac2:	f001 ffd0 	bl	8003a66 <HAL_UART_Receive_IT>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	08004630 	.word	0x08004630
 8001ad4:	20000150 	.word	0x20000150
 8001ad8:	20000218 	.word	0x20000218
 8001adc:	2000014c 	.word	0x2000014c

08001ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	; (8001b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	; (8001b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b06:	f7ff fe35 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f002 f8f3 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b0e:	f7ff fae1 	bl	80010d4 <main>
  bx lr
 8001b12:	4770      	bx	lr
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001b1c:	0800469c 	.word	0x0800469c
  ldr r2, =_sbss
 8001b20:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001b24:	20000270 	.word	0x20000270

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x28>)
 8001b36:	f043 0310 	orr.w	r3, r3, #16
 8001b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f923 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fcca 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f93b 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f903 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000005c 	.word	0x2000005c
 8001bb0:	20000064 	.word	0x20000064
 8001bb4:	20000060 	.word	0x20000060

08001bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_IncTick+0x1c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	20000064 	.word	0x20000064
 8001bd8:	2000025c 	.word	0x2000025c

08001bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <HAL_GetTick+0x10>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	2000025c 	.word	0x2000025c

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4906      	ldr	r1, [pc, #24]	; (8001c88 <__NVIC_EnableIRQ+0x34>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff90 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff2d 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff42 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff35 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b08b      	sub	sp, #44	; 0x2c
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e169      	b.n	80020f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e20:	2201      	movs	r2, #1
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 8158 	bne.w	80020ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a9a      	ldr	r2, [pc, #616]	; (80020ac <HAL_GPIO_Init+0x2a0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d05e      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e48:	4a98      	ldr	r2, [pc, #608]	; (80020ac <HAL_GPIO_Init+0x2a0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d875      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e4e:	4a98      	ldr	r2, [pc, #608]	; (80020b0 <HAL_GPIO_Init+0x2a4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d058      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e54:	4a96      	ldr	r2, [pc, #600]	; (80020b0 <HAL_GPIO_Init+0x2a4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d86f      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e5a:	4a96      	ldr	r2, [pc, #600]	; (80020b4 <HAL_GPIO_Init+0x2a8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d052      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e60:	4a94      	ldr	r2, [pc, #592]	; (80020b4 <HAL_GPIO_Init+0x2a8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d869      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e66:	4a94      	ldr	r2, [pc, #592]	; (80020b8 <HAL_GPIO_Init+0x2ac>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d04c      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e6c:	4a92      	ldr	r2, [pc, #584]	; (80020b8 <HAL_GPIO_Init+0x2ac>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d863      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e72:	4a92      	ldr	r2, [pc, #584]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d046      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e78:	4a90      	ldr	r2, [pc, #576]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d85d      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d82a      	bhi.n	8001ed8 <HAL_GPIO_Init+0xcc>
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d859      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e86:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <HAL_GPIO_Init+0x80>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001ee1 	.word	0x08001ee1
 8001e94:	08001ef3 	.word	0x08001ef3
 8001e98:	08001f35 	.word	0x08001f35
 8001e9c:	08001f3b 	.word	0x08001f3b
 8001ea0:	08001f3b 	.word	0x08001f3b
 8001ea4:	08001f3b 	.word	0x08001f3b
 8001ea8:	08001f3b 	.word	0x08001f3b
 8001eac:	08001f3b 	.word	0x08001f3b
 8001eb0:	08001f3b 	.word	0x08001f3b
 8001eb4:	08001f3b 	.word	0x08001f3b
 8001eb8:	08001f3b 	.word	0x08001f3b
 8001ebc:	08001f3b 	.word	0x08001f3b
 8001ec0:	08001f3b 	.word	0x08001f3b
 8001ec4:	08001f3b 	.word	0x08001f3b
 8001ec8:	08001f3b 	.word	0x08001f3b
 8001ecc:	08001f3b 	.word	0x08001f3b
 8001ed0:	08001ee9 	.word	0x08001ee9
 8001ed4:	08001efd 	.word	0x08001efd
 8001ed8:	4a79      	ldr	r2, [pc, #484]	; (80020c0 <HAL_GPIO_Init+0x2b4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ede:	e02c      	b.n	8001f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e029      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	3304      	adds	r3, #4
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e024      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	623b      	str	r3, [r7, #32]
          break;
 8001efa:	e01f      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	330c      	adds	r3, #12
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e01a      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e013      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	611a      	str	r2, [r3, #16]
          break;
 8001f26:	e009      	b.n	8001f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	615a      	str	r2, [r3, #20]
          break;
 8001f32:	e003      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          break;
 8001f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	d801      	bhi.n	8001f46 <HAL_GPIO_Init+0x13a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	e001      	b.n	8001f4a <HAL_GPIO_Init+0x13e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	d802      	bhi.n	8001f58 <HAL_GPIO_Init+0x14c>
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	e002      	b.n	8001f5e <HAL_GPIO_Init+0x152>
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	3b08      	subs	r3, #8
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	210f      	movs	r1, #15
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	401a      	ands	r2, r3
 8001f70:	6a39      	ldr	r1, [r7, #32]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80b1 	beq.w	80020ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a4c      	ldr	r2, [pc, #304]	; (80020c4 <HAL_GPIO_Init+0x2b8>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_GPIO_Init+0x2b8>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa4:	4a48      	ldr	r2, [pc, #288]	; (80020c8 <HAL_GPIO_Init+0x2bc>)
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_GPIO_Init+0x1ec>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3f      	ldr	r2, [pc, #252]	; (80020d0 <HAL_GPIO_Init+0x2c4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3e      	ldr	r2, [pc, #248]	; (80020d4 <HAL_GPIO_Init+0x2c8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_Init+0x1e4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3d      	ldr	r2, [pc, #244]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_GPIO_Init+0x1e0>
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e006      	b.n	8001ffa <HAL_GPIO_Init+0x1ee>
 8001fec:	2304      	movs	r3, #4
 8001fee:	e004      	b.n	8001ffa <HAL_GPIO_Init+0x1ee>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e002      	b.n	8001ffa <HAL_GPIO_Init+0x1ee>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_GPIO_Init+0x1ee>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	f002 0203 	and.w	r2, r2, #3
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	4093      	lsls	r3, r2
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800200a:	492f      	ldr	r1, [pc, #188]	; (80020c8 <HAL_GPIO_Init+0x2bc>)
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	492c      	ldr	r1, [pc, #176]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	4928      	ldr	r1, [pc, #160]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4922      	ldr	r1, [pc, #136]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	491e      	ldr	r1, [pc, #120]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002064:	4013      	ands	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4918      	ldr	r1, [pc, #96]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	4914      	ldr	r1, [pc, #80]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d021      	beq.n	80020e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
 80020a8:	e021      	b.n	80020ee <HAL_GPIO_Init+0x2e2>
 80020aa:	bf00      	nop
 80020ac:	10320000 	.word	0x10320000
 80020b0:	10310000 	.word	0x10310000
 80020b4:	10220000 	.word	0x10220000
 80020b8:	10210000 	.word	0x10210000
 80020bc:	10120000 	.word	0x10120000
 80020c0:	10110000 	.word	0x10110000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40010800 	.word	0x40010800
 80020d0:	40010c00 	.word	0x40010c00
 80020d4:	40011000 	.word	0x40011000
 80020d8:	40011400 	.word	0x40011400
 80020dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_GPIO_Init+0x304>)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4909      	ldr	r1, [pc, #36]	; (8002110 <HAL_GPIO_Init+0x304>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	3301      	adds	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f47f ae8e 	bne.w	8001e20 <HAL_GPIO_Init+0x14>
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	372c      	adds	r7, #44	; 0x2c
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e001      	b.n	8002136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	807b      	strh	r3, [r7, #2]
 800214e:	4613      	mov	r3, r2
 8002150:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002152:	787b      	ldrb	r3, [r7, #1]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002158:	887a      	ldrh	r2, [r7, #2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800215e:	e003      	b.n	8002168 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	041a      	lsls	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
	...

08002174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f806 	bl	80021a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e26c      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8087 	beq.w	80022e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
 80021f0:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d10b      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d06c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x12c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d168      	bne.n	80022e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e246      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x76>
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a7f      	ldr	r2, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e02e      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a77      	ldr	r2, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0xbc>
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a71      	ldr	r2, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fca2 	bl	8001bdc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff fc9e 	bl	8001bdc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1fa      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xe4>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fc8e 	bl	8001bdc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff fc8a 	bl	8001bdc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1e6      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x10c>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1ba      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4939      	ldr	r1, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7ff fc43 	bl	8001bdc <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7ff fc3f 	bl	8001bdc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e19b      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7ff fc22 	bl	8001bdc <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff fc1e 	bl	8001bdc <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e17a      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03a      	beq.n	800243c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d019      	beq.n	8002402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x274>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7ff fc02 	bl	8001bdc <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff fbfe 	bl	8001bdc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e15a      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 fad8 	bl	80029b0 <RCC_Delay>
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x274>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7ff fbe8 	bl	8001bdc <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00f      	b.n	8002430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff fbe4 	bl	8001bdc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d908      	bls.n	8002430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e140      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	42420000 	.word	0x42420000
 800242c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b9e      	ldr	r3, [pc, #632]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e9      	bne.n	8002410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a6 	beq.w	8002596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b97      	ldr	r3, [pc, #604]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b94      	ldr	r3, [pc, #592]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a93      	ldr	r2, [pc, #588]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b91      	ldr	r3, [pc, #580]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b8e      	ldr	r3, [pc, #568]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a8a      	ldr	r2, [pc, #552]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7ff fba5 	bl	8001bdc <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7ff fba1 	bl	8001bdc <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0fd      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x312>
 80024bc:	4b7b      	ldr	r3, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a7a      	ldr	r2, [pc, #488]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x334>
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a75      	ldr	r2, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	e01c      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x356>
 80024f4:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a69      	ldr	r2, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 800250e:	4b67      	ldr	r3, [pc, #412]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a66      	ldr	r2, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a63      	ldr	r2, [pc, #396]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7ff fb55 	bl	8001bdc <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7ff fb51 	bl	8001bdc <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ab      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCC_OscConfig+0x37e>
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7ff fb3f 	bl	8001bdc <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7ff fb3b 	bl	8001bdc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e095      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b48      	ldr	r3, [pc, #288]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a47      	ldr	r2, [pc, #284]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8081 	beq.w	80026a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d061      	beq.n	8002670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d146      	bne.n	8002642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7ff fb0f 	bl	8001bdc <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7ff fb0b 	bl	8001bdc <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e067      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	492d      	ldr	r1, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a19      	ldr	r1, [r3, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	430b      	orrs	r3, r1
 800260e:	4927      	ldr	r1, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7ff fadf 	bl	8001bdc <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff fadb 	bl	8001bdc <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e037      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x46a>
 8002640:	e02f      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fac8 	bl	8001bdc <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff fac4 	bl	8001bdc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e020      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x498>
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e013      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40007000 	.word	0x40007000
 80026b4:	42420060 	.word	0x42420060

080026b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0d0      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d910      	bls.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4965      	ldr	r1, [pc, #404]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0b8      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a58      	ldr	r2, [pc, #352]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800271e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800272c:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	494d      	ldr	r1, [pc, #308]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d040      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d115      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07f      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e073      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06b      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4936      	ldr	r1, [pc, #216]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7ff fa18 	bl	8001bdc <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7ff fa14 	bl	8001bdc <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e053      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 020c 	and.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1eb      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d210      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 0207 	bic.w	r2, r3, #7
 80027ee:	4922      	ldr	r1, [pc, #136]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e032      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4916      	ldr	r1, [pc, #88]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	490e      	ldr	r1, [pc, #56]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002846:	f000 f821 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	490a      	ldr	r1, [pc, #40]	; (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1cc>)
 8002860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff f976 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000
 800287c:	40021000 	.word	0x40021000
 8002880:	08004648 	.word	0x08004648
 8002884:	2000005c 	.word	0x2000005c
 8002888:	20000060 	.word	0x20000060

0800288c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b490      	push	{r4, r7}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002894:	1d3c      	adds	r4, r7, #4
 8002896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800289c:	f240 2301 	movw	r3, #513	; 0x201
 80028a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x40>
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x46>
 80028ca:	e02d      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	623b      	str	r3, [r7, #32]
      break;
 80028d0:	e02d      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	0c9b      	lsrs	r3, r3, #18
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028de:	4413      	add	r3, r2
 80028e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	0c5b      	lsrs	r3, r3, #17
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028fe:	4413      	add	r3, r2
 8002900:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002904:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290a:	fb02 f203 	mul.w	r2, r2, r3
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e004      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <HAL_RCC_GetSysClockFreq+0xbc>)
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	623b      	str	r3, [r7, #32]
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	623b      	str	r3, [r7, #32]
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	6a3b      	ldr	r3, [r7, #32]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bc90      	pop	{r4, r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	08004638 	.word	0x08004638
 8002940:	40021000 	.word	0x40021000
 8002944:	007a1200 	.word	0x007a1200
 8002948:	003d0900 	.word	0x003d0900

0800294c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b02      	ldr	r3, [pc, #8]	; (800295c <HAL_RCC_GetHCLKFreq+0x10>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	2000005c 	.word	0x2000005c

08002960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002964:	f7ff fff2 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	08004658 	.word	0x08004658

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800298c:	f7ff ffde 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0adb      	lsrs	r3, r3, #11
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08004658 	.word	0x08004658

080029b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b8:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <RCC_Delay+0x34>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <RCC_Delay+0x38>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0a5b      	lsrs	r3, r3, #9
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029cc:	bf00      	nop
  }
  while (Delay --);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e5a      	subs	r2, r3, #1
 80029d2:	60fa      	str	r2, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f9      	bne.n	80029cc <RCC_Delay+0x1c>
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	2000005c 	.word	0x2000005c
 80029e8:	10624dd3 	.word	0x10624dd3

080029ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e041      	b.n	8002a82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fd96 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f000 fc28 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d001      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e03a      	b.n	8002b1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <HAL_TIM_Base_Start_IT+0x98>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x58>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x58>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x58>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d111      	bne.n	8002b08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d010      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	e007      	b.n	8002b18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800

08002b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e041      	b.n	8002bc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f839 	bl	8002bce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fb86 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_TIM_PWM_Start+0x24>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e022      	b.n	8002c4a <HAL_TIM_PWM_Start+0x6a>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d109      	bne.n	8002c1e <HAL_TIM_PWM_Start+0x3e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e015      	b.n	8002c4a <HAL_TIM_PWM_Start+0x6a>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d109      	bne.n	8002c38 <HAL_TIM_PWM_Start+0x58>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e008      	b.n	8002c4a <HAL_TIM_PWM_Start+0x6a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e05e      	b.n	8002d10 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start+0x82>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	e013      	b.n	8002c8a <HAL_TIM_PWM_Start+0xaa>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x92>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c70:	e00b      	b.n	8002c8a <HAL_TIM_PWM_Start+0xaa>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0xa2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c80:	e003      	b.n	8002c8a <HAL_TIM_PWM_Start+0xaa>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	6839      	ldr	r1, [r7, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fd74 	bl	8003780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <HAL_TIM_PWM_Start+0x138>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_TIM_PWM_Start+0x138>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_TIM_PWM_Start+0xfa>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d009      	beq.n	8002cda <HAL_TIM_PWM_Start+0xfa>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIM_PWM_Start+0x13c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_TIM_PWM_Start+0xfa>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_TIM_PWM_Start+0x140>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d111      	bne.n	8002cfe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d010      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfc:	e007      	b.n	8002d0e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800

08002d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0202 	mvn.w	r2, #2
 8002d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa6f 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa62 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa71 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0204 	mvn.w	r2, #4
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa45 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa38 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fa47 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0208 	mvn.w	r2, #8
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa1b 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa0e 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fa1d 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d122      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d11b      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0210 	mvn.w	r2, #16
 8002e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2208      	movs	r2, #8
 8002e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9f1 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f9e4 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f9f3 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0201 	mvn.w	r2, #1
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe fb08 	bl	80014b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d107      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fce1 	bl	8003896 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d10e      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d107      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f9b7 	bl	800326e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d10e      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d107      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0220 	mvn.w	r2, #32
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fcac 	bl	8003884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0ac      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	f200 809f 	bhi.w	800309c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f5e:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	0800309d 	.word	0x0800309d
 8002f6c:	0800309d 	.word	0x0800309d
 8002f70:	0800309d 	.word	0x0800309d
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	0800309d 	.word	0x0800309d
 8002f7c:	0800309d 	.word	0x0800309d
 8002f80:	0800309d 	.word	0x0800309d
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800309d 	.word	0x0800309d
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	0800309d 	.word	0x0800309d
 8002f94:	0800305b 	.word	0x0800305b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f9d0 	bl	8003344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0208 	orr.w	r2, r2, #8
 8002fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
      break;
 8002fd6:	e062      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fa16 	bl	8003410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	021a      	lsls	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      break;
 8003018:	e041      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa5f 	bl	80034e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69d9      	ldr	r1, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
      break;
 8003058:	e021      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 faa9 	bl	80035b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
      break;
 800309a:	e000      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800309c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x18>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0b3      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x180>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003100:	d03e      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0xd0>
 8003102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003106:	f200 8087 	bhi.w	8003218 <HAL_TIM_ConfigClockSource+0x168>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	f000 8085 	beq.w	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	d87f      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x168>
 8003118:	2b70      	cmp	r3, #112	; 0x70
 800311a:	d01a      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xa2>
 800311c:	2b70      	cmp	r3, #112	; 0x70
 800311e:	d87b      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x168>
 8003120:	2b60      	cmp	r3, #96	; 0x60
 8003122:	d050      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x116>
 8003124:	2b60      	cmp	r3, #96	; 0x60
 8003126:	d877      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x168>
 8003128:	2b50      	cmp	r3, #80	; 0x50
 800312a:	d03c      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xf6>
 800312c:	2b50      	cmp	r3, #80	; 0x50
 800312e:	d873      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x168>
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d058      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x136>
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d86f      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x168>
 8003138:	2b30      	cmp	r3, #48	; 0x30
 800313a:	d064      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x156>
 800313c:	2b30      	cmp	r3, #48	; 0x30
 800313e:	d86b      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x168>
 8003140:	2b20      	cmp	r3, #32
 8003142:	d060      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x156>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d867      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x168>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d05c      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x156>
 800314c:	2b10      	cmp	r3, #16
 800314e:	d05a      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003150:	e062      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f000 faee 	bl	8003742 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003174:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	609a      	str	r2, [r3, #8]
      break;
 800317e:	e04e      	b.n	800321e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f000 fad7 	bl	8003742 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a2:	609a      	str	r2, [r3, #8]
      break;
 80031a4:	e03b      	b.n	800321e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f000 fa4e 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2150      	movs	r1, #80	; 0x50
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 faa5 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 80031c4:	e02b      	b.n	800321e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f000 fa6c 	bl	80036b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2160      	movs	r1, #96	; 0x60
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fa95 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 80031e4:	e01b      	b.n	800321e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f000 fa2e 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2140      	movs	r1, #64	; 0x40
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fa85 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003204:	e00b      	b.n	800321e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f000 fa7c 	bl	800370e <TIM_ITRx_SetConfig>
        break;
 8003216:	e002      	b.n	800321e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003218:	bf00      	nop
 800321a:	e000      	b.n	800321e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800321c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a29      	ldr	r2, [pc, #164]	; (8003338 <TIM_Base_SetConfig+0xb8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00b      	beq.n	80032b0 <TIM_Base_SetConfig+0x30>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d007      	beq.n	80032b0 <TIM_Base_SetConfig+0x30>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a26      	ldr	r2, [pc, #152]	; (800333c <TIM_Base_SetConfig+0xbc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x30>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a25      	ldr	r2, [pc, #148]	; (8003340 <TIM_Base_SetConfig+0xc0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <TIM_Base_SetConfig+0xb8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0x62>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a19      	ldr	r2, [pc, #100]	; (800333c <TIM_Base_SetConfig+0xbc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0x62>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <TIM_Base_SetConfig+0xc0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a07      	ldr	r2, [pc, #28]	; (8003338 <TIM_Base_SetConfig+0xb8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d103      	bne.n	8003328 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	615a      	str	r2, [r3, #20]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800

08003344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0201 	bic.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 0302 	bic.w	r3, r3, #2
 800338c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <TIM_OC1_SetConfig+0xc8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10c      	bne.n	80033ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0308 	bic.w	r3, r3, #8
 80033a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 0304 	bic.w	r3, r3, #4
 80033b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <TIM_OC1_SetConfig+0xc8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d111      	bne.n	80033e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	621a      	str	r2, [r3, #32]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40012c00 	.word	0x40012c00

08003410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0210 	bic.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0320 	bic.w	r3, r3, #32
 800345a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <TIM_OC2_SetConfig+0xd0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10d      	bne.n	800348c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <TIM_OC2_SetConfig+0xd0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d113      	bne.n	80034bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800349a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800352c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <TIM_OC3_SetConfig+0xd0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10d      	bne.n	800355e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800355c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <TIM_OC3_SetConfig+0xd0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800356c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00

080035b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a0f      	ldr	r2, [pc, #60]	; (8003650 <TIM_OC4_SetConfig+0x98>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d109      	bne.n	800362c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800361e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	019b      	lsls	r3, r3, #6
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	40012c00 	.word	0x40012c00

08003654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0201 	bic.w	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 030a 	bic.w	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 0210 	bic.w	r2, r3, #16
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	031b      	lsls	r3, r3, #12
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	f043 0307 	orr.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003742:	b480      	push	{r7}
 8003744:	b087      	sub	sp, #28
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	021a      	lsls	r2, r3, #8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	431a      	orrs	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4313      	orrs	r3, r2
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	609a      	str	r2, [r3, #8]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2201      	movs	r2, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	401a      	ands	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037dc:	2302      	movs	r3, #2
 80037de:	e046      	b.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d009      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a12      	ldr	r2, [pc, #72]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a10      	ldr	r2, [pc, #64]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10c      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800

08003884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e03f      	b.n	800393a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fea2 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2224      	movs	r2, #36	; 0x24
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f96d 	bl	8003bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b08a      	sub	sp, #40	; 0x28
 8003946:	af02      	add	r7, sp, #8
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b20      	cmp	r3, #32
 8003960:	d17c      	bne.n	8003a5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_UART_Transmit+0x2c>
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e075      	b.n	8003a5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_UART_Transmit+0x3e>
 800397c:	2302      	movs	r3, #2
 800397e:	e06e      	b.n	8003a5e <HAL_UART_Transmit+0x11c>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2221      	movs	r2, #33	; 0x21
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003996:	f7fe f921 	bl	8001bdc <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	88fa      	ldrh	r2, [r7, #6]
 80039a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d108      	bne.n	80039c4 <HAL_UART_Transmit+0x82>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	e003      	b.n	80039cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039d4:	e02a      	b.n	8003a2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f870 	bl	8003ac6 <UART_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e036      	b.n	8003a5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	3302      	adds	r3, #2
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	e007      	b.n	8003a1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1cf      	bne.n	80039d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2140      	movs	r1, #64	; 0x40
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f840 	bl	8003ac6 <UART_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e006      	b.n	8003a5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d11d      	bne.n	8003abc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Receive_IT+0x26>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e016      	b.n	8003abe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Receive_IT+0x38>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e00f      	b.n	8003abe <HAL_UART_Receive_IT+0x58>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f851 	bl	8003b5a <UART_Start_Receive_IT>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	e000      	b.n	8003abe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad6:	e02c      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d028      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ae6:	f7fe f879 	bl	8001bdc <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d21d      	bcs.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b04:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0201 	bic.w	r2, r2, #1
 8003b14:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e00f      	b.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0c3      	beq.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	4613      	mov	r3, r2
 8003b66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2222      	movs	r2, #34	; 0x22
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0220 	orr.w	r2, r2, #32
 8003bbe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c06:	f023 030c 	bic.w	r3, r3, #12
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ce0 <UART_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d103      	bne.n	8003c3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe fea8 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	e002      	b.n	8003c42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fe90 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 8003c40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009a      	lsls	r2, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	0119      	lsls	r1, r3, #4
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2064      	movs	r0, #100	; 0x64
 8003c82:	fb00 f303 	mul.w	r3, r0, r3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	3332      	adds	r3, #50	; 0x32
 8003c8c:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c98:	4419      	add	r1, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <UART_SetConfig+0x118>)
 8003cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2064      	movs	r0, #100	; 0x64
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <UART_SetConfig+0x118>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	51eb851f 	.word	0x51eb851f

08003ce8 <__errno>:
 8003ce8:	4b01      	ldr	r3, [pc, #4]	; (8003cf0 <__errno+0x8>)
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000068 	.word	0x20000068

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	4d0c      	ldr	r5, [pc, #48]	; (8003d2c <__libc_init_array+0x38>)
 8003cfa:	4c0d      	ldr	r4, [pc, #52]	; (8003d30 <__libc_init_array+0x3c>)
 8003cfc:	1b64      	subs	r4, r4, r5
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	42a6      	cmp	r6, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	f000 fc6c 	bl	80045e0 <_init>
 8003d08:	2600      	movs	r6, #0
 8003d0a:	4d0a      	ldr	r5, [pc, #40]	; (8003d34 <__libc_init_array+0x40>)
 8003d0c:	4c0a      	ldr	r4, [pc, #40]	; (8003d38 <__libc_init_array+0x44>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	42a6      	cmp	r6, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1c:	4798      	blx	r3
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d26:	4798      	blx	r3
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08004694 	.word	0x08004694
 8003d30:	08004694 	.word	0x08004694
 8003d34:	08004694 	.word	0x08004694
 8003d38:	08004698 	.word	0x08004698

08003d3c <malloc>:
 8003d3c:	4b02      	ldr	r3, [pc, #8]	; (8003d48 <malloc+0xc>)
 8003d3e:	4601      	mov	r1, r0
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	f000 b85f 	b.w	8003e04 <_malloc_r>
 8003d46:	bf00      	nop
 8003d48:	20000068 	.word	0x20000068

08003d4c <free>:
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <free+0xc>)
 8003d4e:	4601      	mov	r1, r0
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f000 b80b 	b.w	8003d6c <_free_r>
 8003d56:	bf00      	nop
 8003d58:	20000068 	.word	0x20000068

08003d5c <memset>:
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4402      	add	r2, r0
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d100      	bne.n	8003d66 <memset+0xa>
 8003d64:	4770      	bx	lr
 8003d66:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6a:	e7f9      	b.n	8003d60 <memset+0x4>

08003d6c <_free_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4605      	mov	r5, r0
 8003d70:	2900      	cmp	r1, #0
 8003d72:	d043      	beq.n	8003dfc <_free_r+0x90>
 8003d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d78:	1f0c      	subs	r4, r1, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bfb8      	it	lt
 8003d7e:	18e4      	addlt	r4, r4, r3
 8003d80:	f000 f8ca 	bl	8003f18 <__malloc_lock>
 8003d84:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <_free_r+0x94>)
 8003d86:	6813      	ldr	r3, [r2, #0]
 8003d88:	4610      	mov	r0, r2
 8003d8a:	b933      	cbnz	r3, 8003d9a <_free_r+0x2e>
 8003d8c:	6063      	str	r3, [r4, #4]
 8003d8e:	6014      	str	r4, [r2, #0]
 8003d90:	4628      	mov	r0, r5
 8003d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d96:	f000 b8c5 	b.w	8003f24 <__malloc_unlock>
 8003d9a:	42a3      	cmp	r3, r4
 8003d9c:	d90a      	bls.n	8003db4 <_free_r+0x48>
 8003d9e:	6821      	ldr	r1, [r4, #0]
 8003da0:	1862      	adds	r2, r4, r1
 8003da2:	4293      	cmp	r3, r2
 8003da4:	bf01      	itttt	eq
 8003da6:	681a      	ldreq	r2, [r3, #0]
 8003da8:	685b      	ldreq	r3, [r3, #4]
 8003daa:	1852      	addeq	r2, r2, r1
 8003dac:	6022      	streq	r2, [r4, #0]
 8003dae:	6063      	str	r3, [r4, #4]
 8003db0:	6004      	str	r4, [r0, #0]
 8003db2:	e7ed      	b.n	8003d90 <_free_r+0x24>
 8003db4:	461a      	mov	r2, r3
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	b10b      	cbz	r3, 8003dbe <_free_r+0x52>
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	d9fa      	bls.n	8003db4 <_free_r+0x48>
 8003dbe:	6811      	ldr	r1, [r2, #0]
 8003dc0:	1850      	adds	r0, r2, r1
 8003dc2:	42a0      	cmp	r0, r4
 8003dc4:	d10b      	bne.n	8003dde <_free_r+0x72>
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	4401      	add	r1, r0
 8003dca:	1850      	adds	r0, r2, r1
 8003dcc:	4283      	cmp	r3, r0
 8003dce:	6011      	str	r1, [r2, #0]
 8003dd0:	d1de      	bne.n	8003d90 <_free_r+0x24>
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4401      	add	r1, r0
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	6053      	str	r3, [r2, #4]
 8003ddc:	e7d8      	b.n	8003d90 <_free_r+0x24>
 8003dde:	d902      	bls.n	8003de6 <_free_r+0x7a>
 8003de0:	230c      	movs	r3, #12
 8003de2:	602b      	str	r3, [r5, #0]
 8003de4:	e7d4      	b.n	8003d90 <_free_r+0x24>
 8003de6:	6820      	ldr	r0, [r4, #0]
 8003de8:	1821      	adds	r1, r4, r0
 8003dea:	428b      	cmp	r3, r1
 8003dec:	bf01      	itttt	eq
 8003dee:	6819      	ldreq	r1, [r3, #0]
 8003df0:	685b      	ldreq	r3, [r3, #4]
 8003df2:	1809      	addeq	r1, r1, r0
 8003df4:	6021      	streq	r1, [r4, #0]
 8003df6:	6063      	str	r3, [r4, #4]
 8003df8:	6054      	str	r4, [r2, #4]
 8003dfa:	e7c9      	b.n	8003d90 <_free_r+0x24>
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000144 	.word	0x20000144

08003e04 <_malloc_r>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	1ccd      	adds	r5, r1, #3
 8003e08:	f025 0503 	bic.w	r5, r5, #3
 8003e0c:	3508      	adds	r5, #8
 8003e0e:	2d0c      	cmp	r5, #12
 8003e10:	bf38      	it	cc
 8003e12:	250c      	movcc	r5, #12
 8003e14:	2d00      	cmp	r5, #0
 8003e16:	4606      	mov	r6, r0
 8003e18:	db01      	blt.n	8003e1e <_malloc_r+0x1a>
 8003e1a:	42a9      	cmp	r1, r5
 8003e1c:	d903      	bls.n	8003e26 <_malloc_r+0x22>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	6033      	str	r3, [r6, #0]
 8003e22:	2000      	movs	r0, #0
 8003e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e26:	f000 f877 	bl	8003f18 <__malloc_lock>
 8003e2a:	4921      	ldr	r1, [pc, #132]	; (8003eb0 <_malloc_r+0xac>)
 8003e2c:	680a      	ldr	r2, [r1, #0]
 8003e2e:	4614      	mov	r4, r2
 8003e30:	b99c      	cbnz	r4, 8003e5a <_malloc_r+0x56>
 8003e32:	4f20      	ldr	r7, [pc, #128]	; (8003eb4 <_malloc_r+0xb0>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b923      	cbnz	r3, 8003e42 <_malloc_r+0x3e>
 8003e38:	4621      	mov	r1, r4
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f000 f83c 	bl	8003eb8 <_sbrk_r>
 8003e40:	6038      	str	r0, [r7, #0]
 8003e42:	4629      	mov	r1, r5
 8003e44:	4630      	mov	r0, r6
 8003e46:	f000 f837 	bl	8003eb8 <_sbrk_r>
 8003e4a:	1c43      	adds	r3, r0, #1
 8003e4c:	d123      	bne.n	8003e96 <_malloc_r+0x92>
 8003e4e:	230c      	movs	r3, #12
 8003e50:	4630      	mov	r0, r6
 8003e52:	6033      	str	r3, [r6, #0]
 8003e54:	f000 f866 	bl	8003f24 <__malloc_unlock>
 8003e58:	e7e3      	b.n	8003e22 <_malloc_r+0x1e>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	1b5b      	subs	r3, r3, r5
 8003e5e:	d417      	bmi.n	8003e90 <_malloc_r+0x8c>
 8003e60:	2b0b      	cmp	r3, #11
 8003e62:	d903      	bls.n	8003e6c <_malloc_r+0x68>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	441c      	add	r4, r3
 8003e68:	6025      	str	r5, [r4, #0]
 8003e6a:	e004      	b.n	8003e76 <_malloc_r+0x72>
 8003e6c:	6863      	ldr	r3, [r4, #4]
 8003e6e:	42a2      	cmp	r2, r4
 8003e70:	bf0c      	ite	eq
 8003e72:	600b      	streq	r3, [r1, #0]
 8003e74:	6053      	strne	r3, [r2, #4]
 8003e76:	4630      	mov	r0, r6
 8003e78:	f000 f854 	bl	8003f24 <__malloc_unlock>
 8003e7c:	f104 000b 	add.w	r0, r4, #11
 8003e80:	1d23      	adds	r3, r4, #4
 8003e82:	f020 0007 	bic.w	r0, r0, #7
 8003e86:	1ac2      	subs	r2, r0, r3
 8003e88:	d0cc      	beq.n	8003e24 <_malloc_r+0x20>
 8003e8a:	1a1b      	subs	r3, r3, r0
 8003e8c:	50a3      	str	r3, [r4, r2]
 8003e8e:	e7c9      	b.n	8003e24 <_malloc_r+0x20>
 8003e90:	4622      	mov	r2, r4
 8003e92:	6864      	ldr	r4, [r4, #4]
 8003e94:	e7cc      	b.n	8003e30 <_malloc_r+0x2c>
 8003e96:	1cc4      	adds	r4, r0, #3
 8003e98:	f024 0403 	bic.w	r4, r4, #3
 8003e9c:	42a0      	cmp	r0, r4
 8003e9e:	d0e3      	beq.n	8003e68 <_malloc_r+0x64>
 8003ea0:	1a21      	subs	r1, r4, r0
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f000 f808 	bl	8003eb8 <_sbrk_r>
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d1dd      	bne.n	8003e68 <_malloc_r+0x64>
 8003eac:	e7cf      	b.n	8003e4e <_malloc_r+0x4a>
 8003eae:	bf00      	nop
 8003eb0:	20000144 	.word	0x20000144
 8003eb4:	20000148 	.word	0x20000148

08003eb8 <_sbrk_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	2300      	movs	r3, #0
 8003ebc:	4d05      	ldr	r5, [pc, #20]	; (8003ed4 <_sbrk_r+0x1c>)
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	f7fd fc20 	bl	8001708 <_sbrk>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_sbrk_r+0x1a>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_sbrk_r+0x1a>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	20000260 	.word	0x20000260

08003ed8 <siprintf>:
 8003ed8:	b40e      	push	{r1, r2, r3}
 8003eda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ede:	b500      	push	{lr}
 8003ee0:	b09c      	sub	sp, #112	; 0x70
 8003ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ee4:	9002      	str	r0, [sp, #8]
 8003ee6:	9006      	str	r0, [sp, #24]
 8003ee8:	9107      	str	r1, [sp, #28]
 8003eea:	9104      	str	r1, [sp, #16]
 8003eec:	4808      	ldr	r0, [pc, #32]	; (8003f10 <siprintf+0x38>)
 8003eee:	4909      	ldr	r1, [pc, #36]	; (8003f14 <siprintf+0x3c>)
 8003ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ef4:	9105      	str	r1, [sp, #20]
 8003ef6:	6800      	ldr	r0, [r0, #0]
 8003ef8:	a902      	add	r1, sp, #8
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	f000 f874 	bl	8003fe8 <_svfiprintf_r>
 8003f00:	2200      	movs	r2, #0
 8003f02:	9b02      	ldr	r3, [sp, #8]
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	b01c      	add	sp, #112	; 0x70
 8003f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f0c:	b003      	add	sp, #12
 8003f0e:	4770      	bx	lr
 8003f10:	20000068 	.word	0x20000068
 8003f14:	ffff0208 	.word	0xffff0208

08003f18 <__malloc_lock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_lock+0x8>)
 8003f1a:	f000 bafb 	b.w	8004514 <__retarget_lock_acquire_recursive>
 8003f1e:	bf00      	nop
 8003f20:	20000268 	.word	0x20000268

08003f24 <__malloc_unlock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <__malloc_unlock+0x8>)
 8003f26:	f000 baf6 	b.w	8004516 <__retarget_lock_release_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	20000268 	.word	0x20000268

08003f30 <__ssputs_r>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	688e      	ldr	r6, [r1, #8]
 8003f36:	4682      	mov	sl, r0
 8003f38:	429e      	cmp	r6, r3
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	4690      	mov	r8, r2
 8003f3e:	461f      	mov	r7, r3
 8003f40:	d838      	bhi.n	8003fb4 <__ssputs_r+0x84>
 8003f42:	898a      	ldrh	r2, [r1, #12]
 8003f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f48:	d032      	beq.n	8003fb0 <__ssputs_r+0x80>
 8003f4a:	6825      	ldr	r5, [r4, #0]
 8003f4c:	6909      	ldr	r1, [r1, #16]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	eba5 0901 	sub.w	r9, r5, r1
 8003f54:	6965      	ldr	r5, [r4, #20]
 8003f56:	444b      	add	r3, r9
 8003f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f60:	106d      	asrs	r5, r5, #1
 8003f62:	429d      	cmp	r5, r3
 8003f64:	bf38      	it	cc
 8003f66:	461d      	movcc	r5, r3
 8003f68:	0553      	lsls	r3, r2, #21
 8003f6a:	d531      	bpl.n	8003fd0 <__ssputs_r+0xa0>
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7ff ff49 	bl	8003e04 <_malloc_r>
 8003f72:	4606      	mov	r6, r0
 8003f74:	b950      	cbnz	r0, 8003f8c <__ssputs_r+0x5c>
 8003f76:	230c      	movs	r3, #12
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	f8ca 3000 	str.w	r3, [sl]
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8c:	464a      	mov	r2, r9
 8003f8e:	6921      	ldr	r1, [r4, #16]
 8003f90:	f000 fad0 	bl	8004534 <memcpy>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	6126      	str	r6, [r4, #16]
 8003fa2:	444e      	add	r6, r9
 8003fa4:	6026      	str	r6, [r4, #0]
 8003fa6:	463e      	mov	r6, r7
 8003fa8:	6165      	str	r5, [r4, #20]
 8003faa:	eba5 0509 	sub.w	r5, r5, r9
 8003fae:	60a5      	str	r5, [r4, #8]
 8003fb0:	42be      	cmp	r6, r7
 8003fb2:	d900      	bls.n	8003fb6 <__ssputs_r+0x86>
 8003fb4:	463e      	mov	r6, r7
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	4641      	mov	r1, r8
 8003fba:	6820      	ldr	r0, [r4, #0]
 8003fbc:	f000 fac8 	bl	8004550 <memmove>
 8003fc0:	68a3      	ldr	r3, [r4, #8]
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	1b9b      	subs	r3, r3, r6
 8003fc6:	4432      	add	r2, r6
 8003fc8:	2000      	movs	r0, #0
 8003fca:	60a3      	str	r3, [r4, #8]
 8003fcc:	6022      	str	r2, [r4, #0]
 8003fce:	e7db      	b.n	8003f88 <__ssputs_r+0x58>
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	f000 fad7 	bl	8004584 <_realloc_r>
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d1e1      	bne.n	8003fa0 <__ssputs_r+0x70>
 8003fdc:	4650      	mov	r0, sl
 8003fde:	6921      	ldr	r1, [r4, #16]
 8003fe0:	f7ff fec4 	bl	8003d6c <_free_r>
 8003fe4:	e7c7      	b.n	8003f76 <__ssputs_r+0x46>
	...

08003fe8 <_svfiprintf_r>:
 8003fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fec:	4698      	mov	r8, r3
 8003fee:	898b      	ldrh	r3, [r1, #12]
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	4614      	mov	r4, r2
 8003ff8:	b09d      	sub	sp, #116	; 0x74
 8003ffa:	d50e      	bpl.n	800401a <_svfiprintf_r+0x32>
 8003ffc:	690b      	ldr	r3, [r1, #16]
 8003ffe:	b963      	cbnz	r3, 800401a <_svfiprintf_r+0x32>
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	f7ff feff 	bl	8003e04 <_malloc_r>
 8004006:	6028      	str	r0, [r5, #0]
 8004008:	6128      	str	r0, [r5, #16]
 800400a:	b920      	cbnz	r0, 8004016 <_svfiprintf_r+0x2e>
 800400c:	230c      	movs	r3, #12
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	e0d1      	b.n	80041ba <_svfiprintf_r+0x1d2>
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	616b      	str	r3, [r5, #20]
 800401a:	2300      	movs	r3, #0
 800401c:	9309      	str	r3, [sp, #36]	; 0x24
 800401e:	2320      	movs	r3, #32
 8004020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004024:	2330      	movs	r3, #48	; 0x30
 8004026:	f04f 0901 	mov.w	r9, #1
 800402a:	f8cd 800c 	str.w	r8, [sp, #12]
 800402e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041d4 <_svfiprintf_r+0x1ec>
 8004032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004036:	4623      	mov	r3, r4
 8004038:	469a      	mov	sl, r3
 800403a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800403e:	b10a      	cbz	r2, 8004044 <_svfiprintf_r+0x5c>
 8004040:	2a25      	cmp	r2, #37	; 0x25
 8004042:	d1f9      	bne.n	8004038 <_svfiprintf_r+0x50>
 8004044:	ebba 0b04 	subs.w	fp, sl, r4
 8004048:	d00b      	beq.n	8004062 <_svfiprintf_r+0x7a>
 800404a:	465b      	mov	r3, fp
 800404c:	4622      	mov	r2, r4
 800404e:	4629      	mov	r1, r5
 8004050:	4638      	mov	r0, r7
 8004052:	f7ff ff6d 	bl	8003f30 <__ssputs_r>
 8004056:	3001      	adds	r0, #1
 8004058:	f000 80aa 	beq.w	80041b0 <_svfiprintf_r+0x1c8>
 800405c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800405e:	445a      	add	r2, fp
 8004060:	9209      	str	r2, [sp, #36]	; 0x24
 8004062:	f89a 3000 	ldrb.w	r3, [sl]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80a2 	beq.w	80041b0 <_svfiprintf_r+0x1c8>
 800406c:	2300      	movs	r3, #0
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004076:	f10a 0a01 	add.w	sl, sl, #1
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	9307      	str	r3, [sp, #28]
 800407e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004082:	931a      	str	r3, [sp, #104]	; 0x68
 8004084:	4654      	mov	r4, sl
 8004086:	2205      	movs	r2, #5
 8004088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800408c:	4851      	ldr	r0, [pc, #324]	; (80041d4 <_svfiprintf_r+0x1ec>)
 800408e:	f000 fa43 	bl	8004518 <memchr>
 8004092:	9a04      	ldr	r2, [sp, #16]
 8004094:	b9d8      	cbnz	r0, 80040ce <_svfiprintf_r+0xe6>
 8004096:	06d0      	lsls	r0, r2, #27
 8004098:	bf44      	itt	mi
 800409a:	2320      	movmi	r3, #32
 800409c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a0:	0711      	lsls	r1, r2, #28
 80040a2:	bf44      	itt	mi
 80040a4:	232b      	movmi	r3, #43	; 0x2b
 80040a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040aa:	f89a 3000 	ldrb.w	r3, [sl]
 80040ae:	2b2a      	cmp	r3, #42	; 0x2a
 80040b0:	d015      	beq.n	80040de <_svfiprintf_r+0xf6>
 80040b2:	4654      	mov	r4, sl
 80040b4:	2000      	movs	r0, #0
 80040b6:	f04f 0c0a 	mov.w	ip, #10
 80040ba:	9a07      	ldr	r2, [sp, #28]
 80040bc:	4621      	mov	r1, r4
 80040be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040c2:	3b30      	subs	r3, #48	; 0x30
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d94e      	bls.n	8004166 <_svfiprintf_r+0x17e>
 80040c8:	b1b0      	cbz	r0, 80040f8 <_svfiprintf_r+0x110>
 80040ca:	9207      	str	r2, [sp, #28]
 80040cc:	e014      	b.n	80040f8 <_svfiprintf_r+0x110>
 80040ce:	eba0 0308 	sub.w	r3, r0, r8
 80040d2:	fa09 f303 	lsl.w	r3, r9, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	46a2      	mov	sl, r4
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	e7d2      	b.n	8004084 <_svfiprintf_r+0x9c>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	1d19      	adds	r1, r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	9103      	str	r1, [sp, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfbb      	ittet	lt
 80040ea:	425b      	neglt	r3, r3
 80040ec:	f042 0202 	orrlt.w	r2, r2, #2
 80040f0:	9307      	strge	r3, [sp, #28]
 80040f2:	9307      	strlt	r3, [sp, #28]
 80040f4:	bfb8      	it	lt
 80040f6:	9204      	strlt	r2, [sp, #16]
 80040f8:	7823      	ldrb	r3, [r4, #0]
 80040fa:	2b2e      	cmp	r3, #46	; 0x2e
 80040fc:	d10c      	bne.n	8004118 <_svfiprintf_r+0x130>
 80040fe:	7863      	ldrb	r3, [r4, #1]
 8004100:	2b2a      	cmp	r3, #42	; 0x2a
 8004102:	d135      	bne.n	8004170 <_svfiprintf_r+0x188>
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	3402      	adds	r4, #2
 8004108:	1d1a      	adds	r2, r3, #4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	9203      	str	r2, [sp, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	f04f 33ff 	movlt.w	r3, #4294967295
 8004116:	9305      	str	r3, [sp, #20]
 8004118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041e4 <_svfiprintf_r+0x1fc>
 800411c:	2203      	movs	r2, #3
 800411e:	4650      	mov	r0, sl
 8004120:	7821      	ldrb	r1, [r4, #0]
 8004122:	f000 f9f9 	bl	8004518 <memchr>
 8004126:	b140      	cbz	r0, 800413a <_svfiprintf_r+0x152>
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	eba0 000a 	sub.w	r0, r0, sl
 800412e:	fa03 f000 	lsl.w	r0, r3, r0
 8004132:	9b04      	ldr	r3, [sp, #16]
 8004134:	3401      	adds	r4, #1
 8004136:	4303      	orrs	r3, r0
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413e:	2206      	movs	r2, #6
 8004140:	4825      	ldr	r0, [pc, #148]	; (80041d8 <_svfiprintf_r+0x1f0>)
 8004142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004146:	f000 f9e7 	bl	8004518 <memchr>
 800414a:	2800      	cmp	r0, #0
 800414c:	d038      	beq.n	80041c0 <_svfiprintf_r+0x1d8>
 800414e:	4b23      	ldr	r3, [pc, #140]	; (80041dc <_svfiprintf_r+0x1f4>)
 8004150:	bb1b      	cbnz	r3, 800419a <_svfiprintf_r+0x1b2>
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	3307      	adds	r3, #7
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	3308      	adds	r3, #8
 800415c:	9303      	str	r3, [sp, #12]
 800415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004160:	4433      	add	r3, r6
 8004162:	9309      	str	r3, [sp, #36]	; 0x24
 8004164:	e767      	b.n	8004036 <_svfiprintf_r+0x4e>
 8004166:	460c      	mov	r4, r1
 8004168:	2001      	movs	r0, #1
 800416a:	fb0c 3202 	mla	r2, ip, r2, r3
 800416e:	e7a5      	b.n	80040bc <_svfiprintf_r+0xd4>
 8004170:	2300      	movs	r3, #0
 8004172:	f04f 0c0a 	mov.w	ip, #10
 8004176:	4619      	mov	r1, r3
 8004178:	3401      	adds	r4, #1
 800417a:	9305      	str	r3, [sp, #20]
 800417c:	4620      	mov	r0, r4
 800417e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004182:	3a30      	subs	r2, #48	; 0x30
 8004184:	2a09      	cmp	r2, #9
 8004186:	d903      	bls.n	8004190 <_svfiprintf_r+0x1a8>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0c5      	beq.n	8004118 <_svfiprintf_r+0x130>
 800418c:	9105      	str	r1, [sp, #20]
 800418e:	e7c3      	b.n	8004118 <_svfiprintf_r+0x130>
 8004190:	4604      	mov	r4, r0
 8004192:	2301      	movs	r3, #1
 8004194:	fb0c 2101 	mla	r1, ip, r1, r2
 8004198:	e7f0      	b.n	800417c <_svfiprintf_r+0x194>
 800419a:	ab03      	add	r3, sp, #12
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	462a      	mov	r2, r5
 80041a0:	4638      	mov	r0, r7
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <_svfiprintf_r+0x1f8>)
 80041a4:	a904      	add	r1, sp, #16
 80041a6:	f3af 8000 	nop.w
 80041aa:	1c42      	adds	r2, r0, #1
 80041ac:	4606      	mov	r6, r0
 80041ae:	d1d6      	bne.n	800415e <_svfiprintf_r+0x176>
 80041b0:	89ab      	ldrh	r3, [r5, #12]
 80041b2:	065b      	lsls	r3, r3, #25
 80041b4:	f53f af2c 	bmi.w	8004010 <_svfiprintf_r+0x28>
 80041b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ba:	b01d      	add	sp, #116	; 0x74
 80041bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c0:	ab03      	add	r3, sp, #12
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	462a      	mov	r2, r5
 80041c6:	4638      	mov	r0, r7
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <_svfiprintf_r+0x1f8>)
 80041ca:	a904      	add	r1, sp, #16
 80041cc:	f000 f87c 	bl	80042c8 <_printf_i>
 80041d0:	e7eb      	b.n	80041aa <_svfiprintf_r+0x1c2>
 80041d2:	bf00      	nop
 80041d4:	08004660 	.word	0x08004660
 80041d8:	0800466a 	.word	0x0800466a
 80041dc:	00000000 	.word	0x00000000
 80041e0:	08003f31 	.word	0x08003f31
 80041e4:	08004666 	.word	0x08004666

080041e8 <_printf_common>:
 80041e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	4616      	mov	r6, r2
 80041ee:	4699      	mov	r9, r3
 80041f0:	688a      	ldr	r2, [r1, #8]
 80041f2:	690b      	ldr	r3, [r1, #16]
 80041f4:	4607      	mov	r7, r0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	bfb8      	it	lt
 80041fa:	4613      	movlt	r3, r2
 80041fc:	6033      	str	r3, [r6, #0]
 80041fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004202:	460c      	mov	r4, r1
 8004204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004208:	b10a      	cbz	r2, 800420e <_printf_common+0x26>
 800420a:	3301      	adds	r3, #1
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	0699      	lsls	r1, r3, #26
 8004212:	bf42      	ittt	mi
 8004214:	6833      	ldrmi	r3, [r6, #0]
 8004216:	3302      	addmi	r3, #2
 8004218:	6033      	strmi	r3, [r6, #0]
 800421a:	6825      	ldr	r5, [r4, #0]
 800421c:	f015 0506 	ands.w	r5, r5, #6
 8004220:	d106      	bne.n	8004230 <_printf_common+0x48>
 8004222:	f104 0a19 	add.w	sl, r4, #25
 8004226:	68e3      	ldr	r3, [r4, #12]
 8004228:	6832      	ldr	r2, [r6, #0]
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	42ab      	cmp	r3, r5
 800422e:	dc28      	bgt.n	8004282 <_printf_common+0x9a>
 8004230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004234:	1e13      	subs	r3, r2, #0
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	bf18      	it	ne
 800423a:	2301      	movne	r3, #1
 800423c:	0692      	lsls	r2, r2, #26
 800423e:	d42d      	bmi.n	800429c <_printf_common+0xb4>
 8004240:	4649      	mov	r1, r9
 8004242:	4638      	mov	r0, r7
 8004244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004248:	47c0      	blx	r8
 800424a:	3001      	adds	r0, #1
 800424c:	d020      	beq.n	8004290 <_printf_common+0xa8>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	68e5      	ldr	r5, [r4, #12]
 8004252:	f003 0306 	and.w	r3, r3, #6
 8004256:	2b04      	cmp	r3, #4
 8004258:	bf18      	it	ne
 800425a:	2500      	movne	r5, #0
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	f04f 0600 	mov.w	r6, #0
 8004262:	68a3      	ldr	r3, [r4, #8]
 8004264:	bf08      	it	eq
 8004266:	1aad      	subeq	r5, r5, r2
 8004268:	6922      	ldr	r2, [r4, #16]
 800426a:	bf08      	it	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	4293      	cmp	r3, r2
 8004272:	bfc4      	itt	gt
 8004274:	1a9b      	subgt	r3, r3, r2
 8004276:	18ed      	addgt	r5, r5, r3
 8004278:	341a      	adds	r4, #26
 800427a:	42b5      	cmp	r5, r6
 800427c:	d11a      	bne.n	80042b4 <_printf_common+0xcc>
 800427e:	2000      	movs	r0, #0
 8004280:	e008      	b.n	8004294 <_printf_common+0xac>
 8004282:	2301      	movs	r3, #1
 8004284:	4652      	mov	r2, sl
 8004286:	4649      	mov	r1, r9
 8004288:	4638      	mov	r0, r7
 800428a:	47c0      	blx	r8
 800428c:	3001      	adds	r0, #1
 800428e:	d103      	bne.n	8004298 <_printf_common+0xb0>
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004298:	3501      	adds	r5, #1
 800429a:	e7c4      	b.n	8004226 <_printf_common+0x3e>
 800429c:	2030      	movs	r0, #48	; 0x30
 800429e:	18e1      	adds	r1, r4, r3
 80042a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042aa:	4422      	add	r2, r4
 80042ac:	3302      	adds	r3, #2
 80042ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b2:	e7c5      	b.n	8004240 <_printf_common+0x58>
 80042b4:	2301      	movs	r3, #1
 80042b6:	4622      	mov	r2, r4
 80042b8:	4649      	mov	r1, r9
 80042ba:	4638      	mov	r0, r7
 80042bc:	47c0      	blx	r8
 80042be:	3001      	adds	r0, #1
 80042c0:	d0e6      	beq.n	8004290 <_printf_common+0xa8>
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7d9      	b.n	800427a <_printf_common+0x92>
	...

080042c8 <_printf_i>:
 80042c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	460c      	mov	r4, r1
 80042ce:	7e27      	ldrb	r7, [r4, #24]
 80042d0:	4691      	mov	r9, r2
 80042d2:	2f78      	cmp	r7, #120	; 0x78
 80042d4:	4680      	mov	r8, r0
 80042d6:	469a      	mov	sl, r3
 80042d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042de:	d807      	bhi.n	80042f0 <_printf_i+0x28>
 80042e0:	2f62      	cmp	r7, #98	; 0x62
 80042e2:	d80a      	bhi.n	80042fa <_printf_i+0x32>
 80042e4:	2f00      	cmp	r7, #0
 80042e6:	f000 80d9 	beq.w	800449c <_printf_i+0x1d4>
 80042ea:	2f58      	cmp	r7, #88	; 0x58
 80042ec:	f000 80a4 	beq.w	8004438 <_printf_i+0x170>
 80042f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042f8:	e03a      	b.n	8004370 <_printf_i+0xa8>
 80042fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042fe:	2b15      	cmp	r3, #21
 8004300:	d8f6      	bhi.n	80042f0 <_printf_i+0x28>
 8004302:	a001      	add	r0, pc, #4	; (adr r0, 8004308 <_printf_i+0x40>)
 8004304:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004308:	08004361 	.word	0x08004361
 800430c:	08004375 	.word	0x08004375
 8004310:	080042f1 	.word	0x080042f1
 8004314:	080042f1 	.word	0x080042f1
 8004318:	080042f1 	.word	0x080042f1
 800431c:	080042f1 	.word	0x080042f1
 8004320:	08004375 	.word	0x08004375
 8004324:	080042f1 	.word	0x080042f1
 8004328:	080042f1 	.word	0x080042f1
 800432c:	080042f1 	.word	0x080042f1
 8004330:	080042f1 	.word	0x080042f1
 8004334:	08004483 	.word	0x08004483
 8004338:	080043a5 	.word	0x080043a5
 800433c:	08004465 	.word	0x08004465
 8004340:	080042f1 	.word	0x080042f1
 8004344:	080042f1 	.word	0x080042f1
 8004348:	080044a5 	.word	0x080044a5
 800434c:	080042f1 	.word	0x080042f1
 8004350:	080043a5 	.word	0x080043a5
 8004354:	080042f1 	.word	0x080042f1
 8004358:	080042f1 	.word	0x080042f1
 800435c:	0800446d 	.word	0x0800446d
 8004360:	680b      	ldr	r3, [r1, #0]
 8004362:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004366:	1d1a      	adds	r2, r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	600a      	str	r2, [r1, #0]
 800436c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004370:	2301      	movs	r3, #1
 8004372:	e0a4      	b.n	80044be <_printf_i+0x1f6>
 8004374:	6825      	ldr	r5, [r4, #0]
 8004376:	6808      	ldr	r0, [r1, #0]
 8004378:	062e      	lsls	r6, r5, #24
 800437a:	f100 0304 	add.w	r3, r0, #4
 800437e:	d50a      	bpl.n	8004396 <_printf_i+0xce>
 8004380:	6805      	ldr	r5, [r0, #0]
 8004382:	600b      	str	r3, [r1, #0]
 8004384:	2d00      	cmp	r5, #0
 8004386:	da03      	bge.n	8004390 <_printf_i+0xc8>
 8004388:	232d      	movs	r3, #45	; 0x2d
 800438a:	426d      	negs	r5, r5
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004390:	230a      	movs	r3, #10
 8004392:	485e      	ldr	r0, [pc, #376]	; (800450c <_printf_i+0x244>)
 8004394:	e019      	b.n	80043ca <_printf_i+0x102>
 8004396:	f015 0f40 	tst.w	r5, #64	; 0x40
 800439a:	6805      	ldr	r5, [r0, #0]
 800439c:	600b      	str	r3, [r1, #0]
 800439e:	bf18      	it	ne
 80043a0:	b22d      	sxthne	r5, r5
 80043a2:	e7ef      	b.n	8004384 <_printf_i+0xbc>
 80043a4:	680b      	ldr	r3, [r1, #0]
 80043a6:	6825      	ldr	r5, [r4, #0]
 80043a8:	1d18      	adds	r0, r3, #4
 80043aa:	6008      	str	r0, [r1, #0]
 80043ac:	0628      	lsls	r0, r5, #24
 80043ae:	d501      	bpl.n	80043b4 <_printf_i+0xec>
 80043b0:	681d      	ldr	r5, [r3, #0]
 80043b2:	e002      	b.n	80043ba <_printf_i+0xf2>
 80043b4:	0669      	lsls	r1, r5, #25
 80043b6:	d5fb      	bpl.n	80043b0 <_printf_i+0xe8>
 80043b8:	881d      	ldrh	r5, [r3, #0]
 80043ba:	2f6f      	cmp	r7, #111	; 0x6f
 80043bc:	bf0c      	ite	eq
 80043be:	2308      	moveq	r3, #8
 80043c0:	230a      	movne	r3, #10
 80043c2:	4852      	ldr	r0, [pc, #328]	; (800450c <_printf_i+0x244>)
 80043c4:	2100      	movs	r1, #0
 80043c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ca:	6866      	ldr	r6, [r4, #4]
 80043cc:	2e00      	cmp	r6, #0
 80043ce:	bfa8      	it	ge
 80043d0:	6821      	ldrge	r1, [r4, #0]
 80043d2:	60a6      	str	r6, [r4, #8]
 80043d4:	bfa4      	itt	ge
 80043d6:	f021 0104 	bicge.w	r1, r1, #4
 80043da:	6021      	strge	r1, [r4, #0]
 80043dc:	b90d      	cbnz	r5, 80043e2 <_printf_i+0x11a>
 80043de:	2e00      	cmp	r6, #0
 80043e0:	d04d      	beq.n	800447e <_printf_i+0x1b6>
 80043e2:	4616      	mov	r6, r2
 80043e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80043e8:	fb03 5711 	mls	r7, r3, r1, r5
 80043ec:	5dc7      	ldrb	r7, [r0, r7]
 80043ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043f2:	462f      	mov	r7, r5
 80043f4:	42bb      	cmp	r3, r7
 80043f6:	460d      	mov	r5, r1
 80043f8:	d9f4      	bls.n	80043e4 <_printf_i+0x11c>
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d10b      	bne.n	8004416 <_printf_i+0x14e>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	07df      	lsls	r7, r3, #31
 8004402:	d508      	bpl.n	8004416 <_printf_i+0x14e>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	6861      	ldr	r1, [r4, #4]
 8004408:	4299      	cmp	r1, r3
 800440a:	bfde      	ittt	le
 800440c:	2330      	movle	r3, #48	; 0x30
 800440e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004412:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004416:	1b92      	subs	r2, r2, r6
 8004418:	6122      	str	r2, [r4, #16]
 800441a:	464b      	mov	r3, r9
 800441c:	4621      	mov	r1, r4
 800441e:	4640      	mov	r0, r8
 8004420:	f8cd a000 	str.w	sl, [sp]
 8004424:	aa03      	add	r2, sp, #12
 8004426:	f7ff fedf 	bl	80041e8 <_printf_common>
 800442a:	3001      	adds	r0, #1
 800442c:	d14c      	bne.n	80044c8 <_printf_i+0x200>
 800442e:	f04f 30ff 	mov.w	r0, #4294967295
 8004432:	b004      	add	sp, #16
 8004434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004438:	4834      	ldr	r0, [pc, #208]	; (800450c <_printf_i+0x244>)
 800443a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800443e:	680e      	ldr	r6, [r1, #0]
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	f856 5b04 	ldr.w	r5, [r6], #4
 8004446:	061f      	lsls	r7, r3, #24
 8004448:	600e      	str	r6, [r1, #0]
 800444a:	d514      	bpl.n	8004476 <_printf_i+0x1ae>
 800444c:	07d9      	lsls	r1, r3, #31
 800444e:	bf44      	itt	mi
 8004450:	f043 0320 	orrmi.w	r3, r3, #32
 8004454:	6023      	strmi	r3, [r4, #0]
 8004456:	b91d      	cbnz	r5, 8004460 <_printf_i+0x198>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	f023 0320 	bic.w	r3, r3, #32
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	2310      	movs	r3, #16
 8004462:	e7af      	b.n	80043c4 <_printf_i+0xfc>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	f043 0320 	orr.w	r3, r3, #32
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	2378      	movs	r3, #120	; 0x78
 800446e:	4828      	ldr	r0, [pc, #160]	; (8004510 <_printf_i+0x248>)
 8004470:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004474:	e7e3      	b.n	800443e <_printf_i+0x176>
 8004476:	065e      	lsls	r6, r3, #25
 8004478:	bf48      	it	mi
 800447a:	b2ad      	uxthmi	r5, r5
 800447c:	e7e6      	b.n	800444c <_printf_i+0x184>
 800447e:	4616      	mov	r6, r2
 8004480:	e7bb      	b.n	80043fa <_printf_i+0x132>
 8004482:	680b      	ldr	r3, [r1, #0]
 8004484:	6826      	ldr	r6, [r4, #0]
 8004486:	1d1d      	adds	r5, r3, #4
 8004488:	6960      	ldr	r0, [r4, #20]
 800448a:	600d      	str	r5, [r1, #0]
 800448c:	0635      	lsls	r5, r6, #24
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	d501      	bpl.n	8004496 <_printf_i+0x1ce>
 8004492:	6018      	str	r0, [r3, #0]
 8004494:	e002      	b.n	800449c <_printf_i+0x1d4>
 8004496:	0671      	lsls	r1, r6, #25
 8004498:	d5fb      	bpl.n	8004492 <_printf_i+0x1ca>
 800449a:	8018      	strh	r0, [r3, #0]
 800449c:	2300      	movs	r3, #0
 800449e:	4616      	mov	r6, r2
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	e7ba      	b.n	800441a <_printf_i+0x152>
 80044a4:	680b      	ldr	r3, [r1, #0]
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	600a      	str	r2, [r1, #0]
 80044aa:	681e      	ldr	r6, [r3, #0]
 80044ac:	2100      	movs	r1, #0
 80044ae:	4630      	mov	r0, r6
 80044b0:	6862      	ldr	r2, [r4, #4]
 80044b2:	f000 f831 	bl	8004518 <memchr>
 80044b6:	b108      	cbz	r0, 80044bc <_printf_i+0x1f4>
 80044b8:	1b80      	subs	r0, r0, r6
 80044ba:	6060      	str	r0, [r4, #4]
 80044bc:	6863      	ldr	r3, [r4, #4]
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	2300      	movs	r3, #0
 80044c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c6:	e7a8      	b.n	800441a <_printf_i+0x152>
 80044c8:	4632      	mov	r2, r6
 80044ca:	4649      	mov	r1, r9
 80044cc:	4640      	mov	r0, r8
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	47d0      	blx	sl
 80044d2:	3001      	adds	r0, #1
 80044d4:	d0ab      	beq.n	800442e <_printf_i+0x166>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	079b      	lsls	r3, r3, #30
 80044da:	d413      	bmi.n	8004504 <_printf_i+0x23c>
 80044dc:	68e0      	ldr	r0, [r4, #12]
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	4298      	cmp	r0, r3
 80044e2:	bfb8      	it	lt
 80044e4:	4618      	movlt	r0, r3
 80044e6:	e7a4      	b.n	8004432 <_printf_i+0x16a>
 80044e8:	2301      	movs	r3, #1
 80044ea:	4632      	mov	r2, r6
 80044ec:	4649      	mov	r1, r9
 80044ee:	4640      	mov	r0, r8
 80044f0:	47d0      	blx	sl
 80044f2:	3001      	adds	r0, #1
 80044f4:	d09b      	beq.n	800442e <_printf_i+0x166>
 80044f6:	3501      	adds	r5, #1
 80044f8:	68e3      	ldr	r3, [r4, #12]
 80044fa:	9903      	ldr	r1, [sp, #12]
 80044fc:	1a5b      	subs	r3, r3, r1
 80044fe:	42ab      	cmp	r3, r5
 8004500:	dcf2      	bgt.n	80044e8 <_printf_i+0x220>
 8004502:	e7eb      	b.n	80044dc <_printf_i+0x214>
 8004504:	2500      	movs	r5, #0
 8004506:	f104 0619 	add.w	r6, r4, #25
 800450a:	e7f5      	b.n	80044f8 <_printf_i+0x230>
 800450c:	08004671 	.word	0x08004671
 8004510:	08004682 	.word	0x08004682

08004514 <__retarget_lock_acquire_recursive>:
 8004514:	4770      	bx	lr

08004516 <__retarget_lock_release_recursive>:
 8004516:	4770      	bx	lr

08004518 <memchr>:
 8004518:	4603      	mov	r3, r0
 800451a:	b510      	push	{r4, lr}
 800451c:	b2c9      	uxtb	r1, r1
 800451e:	4402      	add	r2, r0
 8004520:	4293      	cmp	r3, r2
 8004522:	4618      	mov	r0, r3
 8004524:	d101      	bne.n	800452a <memchr+0x12>
 8004526:	2000      	movs	r0, #0
 8004528:	e003      	b.n	8004532 <memchr+0x1a>
 800452a:	7804      	ldrb	r4, [r0, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	428c      	cmp	r4, r1
 8004530:	d1f6      	bne.n	8004520 <memchr+0x8>
 8004532:	bd10      	pop	{r4, pc}

08004534 <memcpy>:
 8004534:	440a      	add	r2, r1
 8004536:	4291      	cmp	r1, r2
 8004538:	f100 33ff 	add.w	r3, r0, #4294967295
 800453c:	d100      	bne.n	8004540 <memcpy+0xc>
 800453e:	4770      	bx	lr
 8004540:	b510      	push	{r4, lr}
 8004542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004546:	4291      	cmp	r1, r2
 8004548:	f803 4f01 	strb.w	r4, [r3, #1]!
 800454c:	d1f9      	bne.n	8004542 <memcpy+0xe>
 800454e:	bd10      	pop	{r4, pc}

08004550 <memmove>:
 8004550:	4288      	cmp	r0, r1
 8004552:	b510      	push	{r4, lr}
 8004554:	eb01 0402 	add.w	r4, r1, r2
 8004558:	d902      	bls.n	8004560 <memmove+0x10>
 800455a:	4284      	cmp	r4, r0
 800455c:	4623      	mov	r3, r4
 800455e:	d807      	bhi.n	8004570 <memmove+0x20>
 8004560:	1e43      	subs	r3, r0, #1
 8004562:	42a1      	cmp	r1, r4
 8004564:	d008      	beq.n	8004578 <memmove+0x28>
 8004566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800456a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800456e:	e7f8      	b.n	8004562 <memmove+0x12>
 8004570:	4601      	mov	r1, r0
 8004572:	4402      	add	r2, r0
 8004574:	428a      	cmp	r2, r1
 8004576:	d100      	bne.n	800457a <memmove+0x2a>
 8004578:	bd10      	pop	{r4, pc}
 800457a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800457e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004582:	e7f7      	b.n	8004574 <memmove+0x24>

08004584 <_realloc_r>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	4607      	mov	r7, r0
 8004588:	4614      	mov	r4, r2
 800458a:	460e      	mov	r6, r1
 800458c:	b921      	cbnz	r1, 8004598 <_realloc_r+0x14>
 800458e:	4611      	mov	r1, r2
 8004590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004594:	f7ff bc36 	b.w	8003e04 <_malloc_r>
 8004598:	b922      	cbnz	r2, 80045a4 <_realloc_r+0x20>
 800459a:	f7ff fbe7 	bl	8003d6c <_free_r>
 800459e:	4625      	mov	r5, r4
 80045a0:	4628      	mov	r0, r5
 80045a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a4:	f000 f814 	bl	80045d0 <_malloc_usable_size_r>
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d20f      	bcs.n	80045cc <_realloc_r+0x48>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4638      	mov	r0, r7
 80045b0:	f7ff fc28 	bl	8003e04 <_malloc_r>
 80045b4:	4605      	mov	r5, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0f2      	beq.n	80045a0 <_realloc_r+0x1c>
 80045ba:	4631      	mov	r1, r6
 80045bc:	4622      	mov	r2, r4
 80045be:	f7ff ffb9 	bl	8004534 <memcpy>
 80045c2:	4631      	mov	r1, r6
 80045c4:	4638      	mov	r0, r7
 80045c6:	f7ff fbd1 	bl	8003d6c <_free_r>
 80045ca:	e7e9      	b.n	80045a0 <_realloc_r+0x1c>
 80045cc:	4635      	mov	r5, r6
 80045ce:	e7e7      	b.n	80045a0 <_realloc_r+0x1c>

080045d0 <_malloc_usable_size_r>:
 80045d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d4:	1f18      	subs	r0, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfbc      	itt	lt
 80045da:	580b      	ldrlt	r3, [r1, r0]
 80045dc:	18c0      	addlt	r0, r0, r3
 80045de:	4770      	bx	lr

080045e0 <_init>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr

080045ec <_fini>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	bf00      	nop
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr
